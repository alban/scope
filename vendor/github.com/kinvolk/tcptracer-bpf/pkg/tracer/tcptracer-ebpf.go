// Code generated by go-bindata.
// sources:
// ../dist/tcptracer-ebpf.o
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tcptracerEbpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x5c\x0f\x6c\x1b\xd7\x79\xbf\xa3\x44\x93\x92\xe3\xca\x73\xc2\x98\xe1\x52\x4c\x59\xb7\xda\x23\xd6\x44\xd4\x1f\x47\x15\xda\x8c\x48\x97\x44\x55\x83\x89\x08\xac\x45\xf3\x9a\x52\x34\x23\x5b\x32\x5d\x9b\x26\x69\x4b\x17\xae\x8d\x81\x2d\xa9\x20\x04\xa9\xec\x65\x9b\x11\x18\x9b\x68\x39\xb5\x36\x18\x88\x80\x0e\xb0\x81\x0d\xa0\xd0\x05\xa8\xb1\x15\xab\xb0\x05\x9b\x0a\x78\x1d\x31\x04\x99\x36\x74\x80\x30\x64\x86\x16\x78\xd5\x78\xef\xfb\x3d\xde\xdd\x77\xef\x8e\x94\xd3\x3f\x21\xa0\x7e\x79\xbf\xf7\xbe\xf7\x7d\xef\xdd\xf7\xbe\xf7\x7b\xef\xce\x7d\xf9\xa9\x67\x9f\x0e\xe8\xba\x26\x7f\x3a\xfe\xf8\x6f\xf1\x49\xeb\xbf\x93\xf8\xdf\x87\xeb\x2d\xab\x0f\x12\xf6\x4a\xfd\xef\x13\xf5\xbf\x72\xe7\xe6\xb6\x59\x36\x32\x79\x81\x97\x63\x5b\xa2\x5c\xbd\x42\xed\x42\x01\x4d\xdb\xdc\xde\xde\xae\x2e\xa1\xdc\xa6\x69\x5b\xf5\x72\x94\x19\xbd\xd1\x6e\xf5\x1b\x30\xcb\xc0\xff\x08\xd2\xd8\x9f\x62\x76\x87\x85\x9d\x1b\xe8\xa7\x1c\x4b\xba\xec\x0e\x2b\xec\xbc\x82\xf1\x46\xb4\xfd\xa2\xc6\xd8\x45\x78\x2b\x7a\x75\xd7\xb5\xe3\x21\x4d\xeb\xae\xcb\x19\xc8\xb1\xd0\x27\x74\xae\x9f\xf4\xb1\x5b\x0d\x51\x39\x12\x0a\x91\xfd\x33\x28\xeb\x41\x2a\x5f\xe1\xe3\xea\xa1\xf9\x2d\xa2\x5d\xdb\xb8\xf0\x63\xac\x6d\x5b\xf4\x67\x9c\x09\x93\xff\xf7\x53\xfd\xdb\x9f\x22\x19\xad\xfb\x51\x77\x63\x5b\xda\xff\xcc\xa7\xfe\x57\xc8\x1b\x1d\xe8\xf7\xcd\x8d\x6d\x92\x35\xc8\x75\xc8\x35\xc8\x5b\x90\xab\x90\x37\x21\x57\x20\x97\x21\x17\x21\x2f\x41\x2e\x40\xce\x41\x9e\x87\x9c\x85\xcc\x43\x4e\xd1\x38\x03\xf4\xbc\xcb\x71\x2a\x97\x63\x54\x6f\x9c\xd9\x8b\xf1\x93\x9e\x51\x88\x52\x39\x7e\x90\xda\xc5\xcf\x03\xef\x06\xde\x0d\x9c\xec\x1a\xf9\x83\x84\x77\x92\x3f\xc6\xd9\x1e\x2a\x1f\x21\x3f\x8d\xd2\xa0\x28\x1b\xb3\x49\xc2\xe7\x31\x9e\x11\x1a\x8f\x31\x3b\x4c\xf5\x85\x14\xfa\xc7\xf8\xe7\x57\x1c\xf3\x92\x29\x94\x44\x7d\x36\x7e\x1b\xfe\xcc\xa2\x4c\xf3\x5a\xfd\x35\x9a\xef\x99\x0e\x8a\x97\xdc\x9b\xef\x09\x7c\xa6\x3e\x68\xd3\xa3\x5c\xfc\x7d\xf4\x93\x87\x1e\x3d\x87\xe9\xc2\x79\x51\xce\xc5\x37\x50\xff\xa2\x28\x1f\x0f\x50\x3f\x19\x63\x42\x94\x47\x2f\x52\xff\x19\x63\x8a\x64\xf1\x24\xb5\x6b\xa3\x76\xa3\x7f\x48\xf5\xe5\x21\x3c\xd7\x38\x3d\xd7\x49\x3d\x2b\xe6\x3d\xa2\x7f\x5d\xd4\x47\xf4\x37\x68\x5d\xd4\x73\x83\x89\x07\xb5\x6f\x0b\x5c\xc6\x61\x2e\xf6\x9c\xd0\xeb\x7a\x95\xca\xd5\x0a\x49\x33\x8a\x9f\xab\xc7\x99\x7c\x8e\xd5\x2c\xe1\x66\xbc\x9b\x4b\x7a\xba\x42\x7a\xb9\x18\x8d\x23\xa8\x2d\xd2\x38\x63\x83\x78\xde\x14\xdf\xd9\xd8\x38\xe4\x5d\xb4\x3f\x0c\x79\x07\xed\xa6\x50\xbf\x85\xf8\xa0\x78\x90\xf6\xba\xee\x77\xfb\x35\x0e\xbf\xda\x6d\xfe\x18\x67\xba\x9b\xea\xdd\x55\xea\x1d\x6c\xaa\x77\xd8\x36\x0f\x96\x5e\x4f\x53\xbd\x3b\x4a\x3d\x8a\xcf\xae\x07\xdd\xed\xa7\xd0\x3e\xac\x98\x6f\xe3\x4c\x52\x94\x8d\x25\x9a\x2f\x95\xbd\x2d\xc5\xf8\x32\x57\x31\xff\x23\xf4\x3c\x32\x4b\xf4\x1c\xb2\x43\xfd\x14\x8f\x57\xf0\x3c\xe2\xf4\xdc\xa6\x2b\x77\xf0\x7c\x86\xa8\xfd\x5b\xf4\x5c\xb2\x47\x3e\x27\x64\xa4\x3d\x27\xec\xc9\x38\x9c\x81\x8c\xb4\x51\x9c\x3e\x2f\xf2\x53\xbd\x1c\x38\x46\x65\x1d\x65\x9d\xe2\xdc\xa8\x0c\x3b\x9e\xbb\x95\x0f\x67\x1d\x79\xc2\x3e\xae\x3c\xc6\xb5\x17\xe3\x32\xa5\x3d\x2f\xf7\xb0\x7d\x68\x4a\x91\xa7\x83\xda\x73\x42\x46\xf4\x03\x22\xcf\x46\xf4\xcf\x8b\xf9\x31\xd7\x45\x50\xd4\x53\x3e\x90\xfe\x64\x11\xa7\x65\xc4\x6f\xd7\xd3\xee\xf9\x1e\x6f\xe9\x79\x8d\x7b\x3e\xaf\xc3\x8a\xe7\x75\x5c\xc3\xbc\x42\x9a\xe3\xf8\x6f\x5b\xbe\x7f\x61\x6f\xa2\xe1\xa7\x2e\xfc\x5b\xc5\xfa\xeb\x61\xfe\xd3\x73\x36\x2a\x94\x57\x55\xf1\x66\x5f\x0f\xdc\xff\x4c\x05\x71\x12\xbb\x8d\xfe\x7f\xc5\xd1\xbf\x5c\xbf\x5d\xbb\xdc\xfd\xde\xf1\xcd\x1b\x32\xbe\xde\x43\xbf\x0f\x31\xbf\x91\x07\x2a\xdd\x9e\x7e\x6f\xf9\xfa\x8d\x78\x8d\xd5\xd0\xff\x1e\xe6\xf7\x31\xea\xf7\xb7\xdd\xfd\x1e\xf3\xf5\xfb\x18\xfc\x7e\x1f\xfd\x06\x44\x7d\xa6\x72\x18\xf6\xd6\x5d\x3c\xa5\x95\xb8\x6c\xc6\x8f\x7e\x6e\xbc\x2c\xfa\x93\xe5\x65\x55\xc4\x49\x64\x17\xf1\x95\x56\x79\x99\x71\x4c\x73\xb5\x6f\x8d\x87\xfd\x88\xc6\xd1\xe0\x61\xff\x49\x65\xe4\x9f\x1b\x01\x8c\x23\x8e\xf9\x2c\xa0\x5d\xe0\xcb\xc4\xc3\x02\xef\x11\x0f\x2b\x80\x87\x81\x7f\xbd\x8d\x75\x1c\xd5\x19\x0f\xbb\xff\x87\x9a\x73\x7e\xb0\x2f\xc7\xc0\xb7\xb0\x4e\xcb\x31\xf0\x8d\x18\xf8\x46\x0c\xfc\x24\x06\xbe\x15\x03\xdf\x8a\x81\x6f\xc5\xc0\xb7\x62\xe0\x5b\x2c\x4f\xca\x3c\x5a\x8e\x4d\x38\xf2\x55\x39\x96\xa2\x71\xb6\x81\x87\x0d\xa5\xc0\x13\xc6\x31\x5e\xe2\x61\x46\x11\xfc\x6b\x08\xfd\xc4\x27\xc0\x4b\xbb\xa9\xbe\x04\xbe\x35\x02\xbb\x43\xe0\x71\xc5\x1e\xd4\x0f\xa2\x1e\x7e\x0e\x81\xbf\x15\x93\xa8\x1f\x46\x3d\xc6\x35\x04\xde\x56\x04\xff\x1a\x5a\x74\xcc\x43\xa6\x04\xde\x35\xf2\x0e\xf8\x1c\x78\xd7\x08\xcd\x63\xf5\x29\x9a\xdf\x99\x20\x78\xd7\x91\xef\x11\xef\x6a\x07\xef\x1a\xf9\x7b\xf4\x03\xde\x35\x42\xf3\x3e\x5d\x3a\x2f\xca\xb9\x91\x35\xd4\x83\x4f\xb5\x83\x77\x9d\xa5\xfd\x6b\xf4\xb0\x06\x7f\x6f\xa2\xdd\x84\x28\x67\xce\x82\xa7\xc1\xee\x28\xfc\x28\x1f\x91\xcf\x11\xfc\x35\x46\x79\x6b\x2c\x70\x59\x33\x43\xbe\x7a\x8d\xda\x85\xea\x71\xb9\x52\x8f\x97\xae\x43\x54\xb6\xe7\x9d\x6e\xdb\xfe\xe6\xda\x47\x90\xbf\xcb\xfb\x29\x0e\x65\x5e\x2c\xef\x47\x3f\x3e\xeb\x3e\xa5\xdc\x07\xbf\x41\xe3\x08\x63\x9f\x81\x1c\x0b\x13\x01\xb4\xe2\xb7\xb5\xf8\x92\xe3\x2d\xc7\x36\x21\x71\xfe\x40\xfe\xcd\xc5\x3e\x84\xdc\x02\xbe\xee\xe0\x83\xc6\x19\x8a\x03\xce\xa3\x4c\xff\xf7\x7a\xcc\x53\xd8\x3e\x3f\x3e\xfa\x51\xa6\xbf\xb9\x03\x7d\xbb\xde\xc6\x0e\xed\x86\x99\x7e\x4d\xa9\xdf\x9c\x77\x7e\x78\x8f\xbc\x73\x6b\x87\xbc\x73\xbd\x25\x1e\xb3\xee\xc9\x63\x94\xbc\xfa\xcf\x11\x17\x6f\x52\x9c\x18\xcb\x88\x8f\x79\xe4\x9f\x6b\x88\x93\x97\x90\x6f\xbe\x85\xf3\xea\x89\x29\xf0\x52\xc4\x4d\x3c\x0f\x5e\xba\x85\x38\x2a\x30\x1e\x5b\xa2\xbc\xf0\xfb\xe4\x8f\x3c\x17\x45\xda\x7e\xdd\x31\x4f\xa3\x8d\x73\x36\x1d\xdc\x2c\x9e\x7a\x80\xca\x0d\x9e\xfa\xab\xa2\xcc\xcf\xe9\x7c\x7d\x5b\x3c\xb6\xdb\xc5\x57\x0f\x2a\xf8\xea\x58\x47\x50\xd4\xf3\x75\x47\xeb\xd3\xda\x47\x3e\x19\xa5\x8d\x72\x2c\x74\x1f\xb5\xdf\x85\xf6\xbb\xd4\xed\x5f\x78\x90\x36\x3c\x7b\x1e\x48\xb1\x3c\xd0\xad\xcc\x03\xbb\xee\x49\x6f\xa7\x7c\xc5\x94\x66\x5c\x95\x3b\x93\x8c\x3f\x50\x3c\x19\xc7\x29\xef\x1a\x53\x79\x97\x3f\xeb\x7e\xfb\x3c\xee\x3b\x22\x1d\x64\xd9\x7d\x7f\x73\x91\xf6\xef\x0b\xd4\x6e\x4c\x5f\x10\xfb\xba\x65\x7f\x18\xf1\xb4\xb2\x23\x1e\x13\x01\xef\x33\x50\x6f\x9e\x1f\xcc\x7e\x83\x5a\x07\x70\xda\xef\x64\x3c\xaa\xd6\xcb\x8a\x62\x7d\x4e\x57\xc8\x8f\x31\xfd\x6b\x34\xaf\x0d\x3e\xec\xe4\x05\x59\xf8\x9b\x45\xbe\xcd\x35\xf2\xec\xdd\x6d\xfb\xb8\xb2\xc8\xc3\xc6\x85\x68\xcb\xfe\x38\xd6\xef\x85\xee\xa6\x7a\x9b\x4a\xbd\x83\x4d\xf5\x6a\xaa\xfc\x74\xa1\xa7\xa9\xde\x5d\xa5\x1e\xf2\x5a\xd4\xdd\x7e\xd8\x9e\xd7\xd0\xaf\xa5\x97\x14\x65\x63\x69\xd8\x33\xaf\x6d\x28\xcf\xd3\x98\x7f\xf0\x99\xcc\xd2\x26\xf2\xd0\x65\xe4\x2d\x3c\x8f\xf8\x22\xf2\x96\xbc\xf7\xb8\x42\xed\xdf\xa2\xe7\x92\x3d\x72\x55\xc8\x48\xfb\xe7\x85\x3d\xf7\x79\x7a\x48\xe0\x56\x9e\xa2\x71\x5a\x79\x8a\x88\x84\x3d\x6e\x2f\xf9\xc6\xad\xf3\x7c\xe8\xc5\x47\x55\x71\x21\xf6\xd1\x36\xe7\xfc\x99\xd2\xcc\x68\xf2\x5c\x60\x2c\xd1\xfa\xe6\xe3\x90\xbc\x53\x9e\x57\xe5\x7d\x50\xa6\xf2\x97\x88\xd3\x2f\xa3\x2c\xe3\x3b\x8f\xf2\x65\x94\x4b\x28\xd3\x7c\x56\xf7\x91\x1f\xb7\x91\x5f\x73\x71\xe2\xa5\x33\x3a\x95\x6f\x43\xe6\x62\x2f\x41\xef\x2a\xfa\xf9\x3d\xe4\xed\x55\x07\xaf\x31\x2a\x37\x1d\xfc\xa6\x7a\x15\xe3\x6f\xa7\xf8\xa9\x66\xa8\x1c\x0d\x38\xe7\xf5\x46\x7d\xf0\x83\x98\x87\x87\x5a\x7c\x0e\x22\xff\xa0\x2c\xf3\xe5\xc7\x3f\x1f\xfd\xc7\x76\xa7\x76\x2f\xe7\x9a\x61\x76\x9e\x71\xf2\x43\x37\x2f\xac\x39\x79\xe1\x85\x94\xd2\x6f\x15\x2f\x1c\x56\xf1\x2b\x1f\x7d\xce\x0b\x2f\xed\x40\xbf\x29\x9f\xf4\xb1\xcb\x79\xa1\x92\x57\xb6\x90\x3f\x95\xbc\xb0\x85\xfc\xa9\xe4\x85\x3e\xf9\xb3\xd6\x52\xfe\xac\xed\x8c\x17\x36\x78\x13\xc5\x89\xf1\x16\xe2\xe3\x08\xc5\xcf\x68\x44\x43\xbf\x88\x97\x21\x8a\x2f\xe3\x2a\xf8\x22\xce\x81\x16\x3f\x5c\x63\xfc\xf0\x1f\x68\xdd\x2f\x82\x1f\x76\xbe\x4b\x79\x36\x48\xe7\xce\xd1\x7e\xea\x3f\xd2\xfe\xba\x28\x5b\xf9\xf5\x35\x2a\x37\xf2\xeb\xbc\x6b\x1d\xae\xf8\xae\xc3\x3f\x60\xfc\x46\x7d\xae\x57\xc5\xdd\x4f\x27\xbf\x5e\x76\xe4\x57\x03\xeb\xd9\xb8\x82\x75\x1a\x77\xde\x23\xc8\xbc\x68\x5c\xc1\xba\x8e\x3b\xef\x1d\x8c\xca\x9a\x47\xfe\xa5\x79\xa5\xfc\x68\xf1\xd2\xea\x03\x24\xd3\x74\x6d\x28\xce\xe7\x22\x3f\x43\xe6\x46\x2e\x36\xf2\x76\xb7\xf0\xf3\x0d\xd8\x59\x66\xf9\x79\xf1\x9e\xf3\x73\x4a\x53\xe7\x67\xd5\x73\x0c\x6a\x5f\xa2\xfe\xc1\x5f\x39\x4f\xb5\xee\xc1\x06\x1b\x65\xb1\x2e\xe8\x58\xae\x19\xd3\x3b\xe4\xaf\x8d\x7b\xaa\x92\x68\x21\xef\xa9\xc6\xf4\x82\x6e\x86\x42\xf9\x04\x9d\x3b\xaa\x78\x2f\x73\x03\x76\xca\xf3\xf4\x7c\xb2\xf3\x14\xd7\xf2\x5c\x57\xc5\xb9\x47\xb5\x0e\x6f\x29\xcf\x9f\x49\xf2\x7b\xe9\x96\xe7\xfa\x7d\x57\xb1\x7e\xcb\xf3\x14\x87\xb9\xf9\x45\xd7\xfa\xf0\xbb\x97\x6b\x79\x9f\xf2\x19\xc7\xa2\x72\x9f\x5a\xc4\x3e\x55\x60\xbc\xd9\xb9\xfe\xb2\xb8\x4f\xf3\xe6\xcd\x49\x27\x6f\x96\xef\xa1\x7c\xfc\x59\xf0\x7b\x0f\xe5\xa3\xa7\xe4\xcd\xf2\x3e\xc0\x47\x4f\xc9\x9b\xe5\x7d\x80\x8f\x9e\x92\x37\xcb\xfb\x80\x87\xdc\xed\x93\xf6\xbc\x8f\x7e\xdd\x71\x93\xdc\x21\x6f\xc6\xfc\xe3\x3d\xac\xc5\x9b\xaf\x32\xde\xbc\xcc\x78\xf3\x5f\x30\xde\x7c\x1d\xbc\x99\x16\x90\x9b\x37\xd3\x01\xd5\xca\xeb\x14\x77\x32\xaf\x8f\xe9\xee\x73\xef\xa2\x0f\x5f\x0b\xe2\x33\x0a\x2b\x1f\x23\x0f\xb3\x73\x79\xf9\x84\x75\x3f\x6e\xea\x65\x71\x3f\x66\x54\x06\x59\x9e\x3b\xcc\xf6\x09\xe7\xbd\x9a\xe4\xb9\x59\xe4\x3f\x8b\xbf\x9e\x44\x79\xd9\x23\x0f\xe7\x3d\x78\x30\xee\x4b\x2a\xd7\x1d\x7c\x5a\xf5\x1e\xcb\xf1\x7e\xcd\x96\x67\xcd\x78\x30\x2a\x3d\xb6\x3c\x6f\xfd\xe4\xfd\x0a\xe7\xc3\x41\xed\x07\x9a\x73\x9c\xc8\x1b\xb1\x8f\x5b\xde\x78\x47\x73\xf2\xdb\x56\xef\xe9\x93\x90\x0b\xf7\xc6\x6f\xe5\xfd\x21\xf3\x5b\xc5\x6f\x93\x7e\xf7\x8f\x0a\x7d\xce\x6f\x17\x76\xa0\xdf\xf2\x7d\xa9\xc2\x6e\x4b\xfc\xb6\x85\x3c\xe7\x7b\xef\xe9\xa3\xe7\x7b\xef\xa9\xc8\x73\xb5\x96\xf2\xdc\x0e\xf9\xed\x55\xc4\x85\xfc\xde\x64\x09\xf1\x31\xb4\x0c\x7e\x85\x38\x89\x83\x8f\x55\x36\x1c\xf1\x36\xbd\x88\xb8\xe9\xc4\x7b\x0b\xbc\x7f\xcf\x1d\xf9\x0e\xad\xe3\x6b\xe0\xb5\x2f\xd1\xfb\x91\xea\xe3\xe4\xcf\xe8\x33\x24\x23\xa1\x49\xf2\x13\xef\x07\x46\x0f\x48\xfc\xa8\x90\xcf\x6b\xc8\x8b\xda\x04\x95\x83\x28\x07\xbf\x22\xca\x74\x4b\x59\x5f\x17\xed\xb8\xaf\x64\xf9\x35\x2a\xd2\xab\xed\xbe\xf2\x0b\xb8\xaf\x0c\xbc\x40\xed\x91\xe7\x64\xbe\xe3\xbc\xf0\x85\x47\xc6\x1b\xf3\xfc\xb3\xc9\xa7\xd7\x59\x3e\xfd\x6b\x47\x3e\x95\xbc\xd7\x2b\x9f\x46\x43\x4e\xff\x65\xbb\x34\xde\x17\xce\xa0\xbd\xa5\x57\x60\xfe\xb5\x96\x6f\x8d\x0a\xee\x3d\xae\x80\x8f\xe3\x3b\x8f\x2a\xce\x2b\x33\x78\x4f\x55\xa5\x65\xe0\xfa\x4e\xa0\x8a\x73\x53\x44\x03\x6f\x91\xe5\x76\x22\xb4\x55\x7a\xdd\xd7\x78\xfe\x56\xfb\x7d\x8e\xfa\x74\x5e\x73\xea\x0b\xd6\xfb\xd1\xf7\x03\x39\x3e\xcf\x71\xed\x73\xda\xcd\x0e\x49\xbe\x40\xe7\x82\xdb\x41\xcc\x2f\xbe\xf3\xf2\x9e\xff\x37\xd9\xfc\x5f\x76\xed\x37\x66\x3e\x0c\x6a\xba\x0b\xf7\xe3\x01\xfc\xde\xe6\x67\x15\xbf\xf2\xfc\x63\x5c\xc1\xfe\x13\xcf\xb3\xf3\x11\x3f\xd7\x39\xdf\x13\x7b\xc7\xf7\x9c\xed\xf9\xd9\xe2\x1b\x79\x2e\x8d\xf7\xdd\x33\xd8\x8f\x6e\x43\xe6\x86\xe6\x99\xff\xaf\xfd\xd4\xf8\x44\x4a\xcc\xf1\xff\xfc\x58\xe0\xae\x73\x19\xbe\x13\x99\xe6\xdf\x29\xd0\xbc\xf1\xf3\x59\xa4\x83\x0e\x52\xf6\xe7\xad\xfa\x2e\xc2\x7d\x3e\x7b\x59\x48\xeb\x7c\xf6\x35\x8d\xce\x67\x38\x77\xe3\xbb\x86\xdc\x09\x7c\xd7\x72\xe2\x03\xec\xef\xcd\xf7\xab\x0f\x76\xb0\xcf\x85\xf0\x1e\xbf\xd9\xf7\x65\xe5\x13\xe0\xc9\x27\xf0\x5d\x43\x0b\xe7\x43\xf5\x3e\x9d\xa4\x71\x2f\x6d\x78\xee\x7f\xaa\x73\x4c\xf9\xc4\x25\xcc\xc3\x84\x6b\x7d\xf9\xdf\x4f\x73\x9e\x17\xa0\xef\x3f\xbe\x45\xf3\x1c\x14\x2c\xad\x35\xbe\x37\xa1\xe4\x7b\xf2\x3d\x63\x0a\xbc\xef\xe9\x46\x3d\xad\x63\xf2\x9b\xbf\x9f\x2b\xe3\x9c\x6b\xc6\x9d\xd9\x5e\x9e\x2b\xad\x73\x26\xce\xe3\xb1\x77\x20\x57\x21\xe5\x3e\x73\x13\x52\xde\x77\xcb\xf7\x37\xd7\xb1\x1f\xe1\x1c\x14\xfb\x1e\xd6\xeb\x38\x5b\x5f\xd7\xf1\x1c\x9b\x9f\x47\x57\x7d\xce\xa3\x2a\xfe\xf3\x8e\xfd\x3b\x2a\xc6\x7f\xac\xef\xb4\x70\xdf\x56\xa1\xb8\xb6\xce\x15\x7f\xeb\x5a\xf7\x2b\xca\x7d\xcd\x99\x7f\xe4\x77\xae\x33\x90\x91\x00\x0d\xc4\x9e\x07\xcc\xa9\xfd\xcc\x3e\xda\x90\x32\x95\x5b\x0e\x7d\xeb\x5c\x87\xf7\xa3\x8c\x6f\xd0\x77\x3d\x7a\x5d\x1f\xdf\xed\xd8\xf2\xce\x25\x9f\xfb\x22\x79\xbf\xc9\xf7\x2d\xef\xfb\x7a\xc4\x79\xec\xa3\xc6\xf9\xce\xcf\x33\x7e\xf1\x2d\xef\xeb\x9b\xc7\x35\xee\x61\x9b\xc6\xb7\x3c\xb7\xdc\x86\x94\xdf\x6f\xbc\x0b\xb9\xe6\x88\xdf\x9f\xdc\x7a\xa0\xef\x03\x8d\x65\xac\x07\xf8\x9d\x9d\x97\xeb\xa1\xf9\xf9\x65\xed\x23\x9e\x5f\xd6\x77\xa8\xcf\xcf\x6d\xab\x3e\xfa\x72\x3d\x86\x3a\xdc\xe7\xb5\x5b\x3e\xe7\x12\x6b\x5d\xd6\x3c\xd6\xe5\xbf\xb5\xb8\x2e\x6f\x81\x37\xd0\xf3\x19\x0b\xe0\x5e\x04\xe3\x69\xce\xfb\x11\xaf\xf8\x2e\xc4\xb8\x4a\x71\x30\xd6\x8e\xf7\x92\x03\xe8\x07\xdf\x4b\xc9\xef\xb5\x28\x8b\xd9\xce\x03\xc1\x9e\xc6\xf8\x28\x5e\x91\xa7\xaf\x21\x3e\x5f\x9a\x62\xf1\x49\xfc\x27\x3b\x5f\x62\xbc\xc9\xc9\x7b\x32\x15\x19\x8f\x73\x28\xcb\xf8\x7d\x0d\x65\x79\xff\xb7\xd0\xc8\xb7\x34\x7f\x17\x59\x1c\xbe\xe1\x9a\xcf\x59\xe5\x7c\xce\x35\xc9\x73\xe7\x5c\x7c\x87\xf2\x5c\x11\xf6\x16\x3c\xf2\xdc\x69\x5a\xbf\x9e\x79\x2e\x47\x7a\xb6\x3c\x37\xe1\x97\xe7\xf0\x1d\x8c\xcc\x73\x41\xed\xa8\xd0\x1f\x7d\x84\xf0\x88\x9e\xa1\xf2\x17\x50\x6e\x4b\x3b\xe6\xcb\xed\xdf\xef\x36\xf1\xef\x79\x97\x7f\x7e\x79\x58\xbe\x8f\xb7\xf8\xdf\x6f\x89\x72\xbb\xed\x4f\xc3\x37\x28\x2a\xcc\x9c\xd3\x30\xfe\x9a\x61\xe6\x73\x8b\x32\xec\xa0\x02\x33\xf5\xe6\xa4\x7e\xfd\xf7\x4c\xea\x59\xed\xc7\xb6\x6f\x3f\x55\x3f\x7a\x9f\x13\xd4\xf2\xbb\x9c\xf8\x63\xc0\x53\x21\x27\xfe\x77\x01\xc2\xc3\x61\x27\xfe\xc7\xc0\x67\xdb\x9c\xf8\x03\xc0\x57\x58\x3f\x3f\xd4\x09\x9f\x62\xfd\x7c\x17\xf8\x02\xf3\xe7\x6d\xf8\xb3\xca\xda\xbf\x0c\x7c\x8d\xe1\xcf\x48\x9c\xf9\xf3\x4f\xe8\x1f\xdb\x98\xd5\x3f\xf0\xbd\x0c\xff\x67\xa1\xdf\xa1\xd5\x58\x3f\xf7\x05\x08\x3f\xcf\xc6\x55\xd5\x09\xe7\xe3\xfd\x2e\xfa\xd9\x60\xf8\xf7\xd1\x3e\xca\xfc\x5f\x06\x7e\x90\xe1\x69\xd1\xcf\x6e\xad\x27\xe8\xc4\xff\x26\x40\xf8\x1c\xc3\x5f\x07\xbe\xc0\xf0\x76\xe0\xeb\x0c\xff\x0d\xf4\x1f\x65\xf8\x01\xe0\xdd\x0c\xbf\x8e\x7e\xb6\x9c\xb0\xc8\x2b\x26\xce\xff\x71\xdf\x7f\xe9\x84\x0f\x33\xfc\xfb\xa2\xff\x3d\xda\x06\x9b\xe7\x1b\xc0\xb7\x18\xfe\x0d\xe0\xd1\x76\x27\xfe\x3c\xf0\x14\xf3\xf3\xaf\x02\x84\x2f\x33\xfc\x55\xe0\x2b\x0c\xbf\xab\xc3\x2e\xc3\xaf\xa1\xff\xcd\xdd\x4e\x7c\x06\x78\x98\xc5\xcf\x2f\x01\x1f\x64\xf8\x39\xd8\x9d\x62\xf8\x9f\xa0\xfd\x1c\xeb\xff\x34\xf0\x83\xf7\x39\xf1\xc7\x81\x27\x99\x9f\xfb\xe5\xfc\xb0\xf6\x7b\x81\xe7\xd9\xfc\xbf\x05\x7f\x66\x19\x3e\x01\x7c\x95\xe1\xa3\xa2\x9f\x2e\x6d\x8e\xcd\xff\xb7\x03\x84\xd7\x18\xfe\x75\xe0\x1b\x0c\xff\x40\x27\x9c\xc7\xf3\x0d\xe0\x97\xd8\x7a\xf9\x33\xd8\xad\x31\xfc\x14\xfa\x9f\x60\xf3\xf9\x4d\xb4\xcf\x33\xbb\xc7\x81\xcf\x32\xfc\x4f\xd1\xcf\x16\x1b\xef\xef\x00\x0f\xb3\x7d\xe0\x7d\xf8\x39\xce\xf0\xd7\xc5\x3e\x1d\xd3\xf8\xef\x15\x81\x47\x5d\xf8\xa7\x05\xfe\x90\x0b\xff\x91\xd8\xbf\xef\x77\xe1\x03\x02\x7f\xc0\x85\x7f\x45\xf4\xb3\xc7\x85\x3f\x26\xf0\xdd\x2e\xfc\x3b\x9a\x89\xb7\xb9\xf0\x23\x02\x0f\xb9\xf0\x90\xc0\xbb\x5c\xf8\xb2\xc0\x83\x2e\x3c\x29\xf0\x0e\x17\xbe\x2e\xfc\xff\x05\x17\xfe\x88\xc0\xf7\xb9\xf0\x88\xf0\x7f\xbf\x0b\x0f\x08\x3e\x1b\x71\xe1\x5f\x12\xfd\x3c\xe8\xc2\x87\x21\xcd\xc7\x66\x7e\xd1\x36\xc8\xca\x79\x56\x5e\xb1\x95\x4d\xdd\xf1\x5d\x56\xf9\x8b\xf5\xbf\xcd\xb0\xb3\xde\xde\xff\x13\xac\xff\x27\x58\xff\x66\x79\x91\xf5\x7f\xab\xcd\x59\x5e\x0b\x39\xed\x85\x6d\xf6\x46\x34\x0d\xff\x1a\xcc\xa6\xcf\xca\xe7\xdb\x9c\xfa\xeb\x36\xbe\x60\xfe\x53\xb1\x70\xd0\x59\x3f\x1e\x74\xea\xd7\x98\xbd\xd9\x4e\xab\x6c\x5e\xe5\x2f\x77\xfa\xfb\x93\xd4\x9d\xe5\x2d\xe6\x4f\x77\xd0\xe9\xcf\x2c\xb3\xdf\xb3\xdb\x59\xaf\xdd\xe7\xb4\x97\xdf\xe3\xf4\x67\x9c\xcf\x07\xb3\x9f\x62\xe3\x5f\x69\x77\xd6\xcb\x3c\x2d\xeb\xd7\x3b\x9c\xfd\x6b\x8f\x96\x26\x67\x4b\x5a\xae\x30\x59\xca\x17\x4e\x1f\x9d\x4c\xa7\xa7\x4f\x4d\x96\xd2\xd9\x62\x2e\x9d\xc9\x66\x27\xf3\x25\xed\xd1\xc2\xe4\xc9\x46\xf5\x63\xbc\xd6\xa6\x58\xca\xe6\xd3\xe7\x0e\xa5\xb3\xa7\x4f\x9d\x9a\xcc\xd6\x6b\xd4\xb0\xb3\x3b\x55\xa5\xb2\x86\xdb\xe9\x57\xdb\xe9\xf7\xb3\xd3\xef\x69\xc7\xaa\xf9\x6a\x26\x5f\x34\xb1\x52\x21\x93\x9d\x2c\xa4\x8b\xa5\x4c\xe9\x6c\x51\x4b\x9f\x9b\x2c\x14\xa7\x4f\x9f\x72\x18\x2b\xd6\x67\xc2\xac\x9f\xe4\xdd\x59\x15\xf6\xe6\xd9\x93\xa7\x8b\xae\xa6\x04\xa6\x4f\x4e\x67\x27\x4f\x99\xff\x71\xf4\xec\xf4\xc9\x17\xd3\xd3\x2f\x6a\x8f\x16\x4b\x85\x52\xe6\x68\x5d\x1a\x5f\x35\xe5\xb3\x4f\x3e\xd9\x97\xfe\xac\x29\x12\xe9\x5e\x21\x0f\xa5\x13\x9f\x25\x38\x01\x5c\x96\x07\xd1\x0c\x32\x31\x48\xcd\x1f\x37\x45\x3f\x89\xba\xb2\x90\x03\x90\xfd\x90\x7d\x90\x09\x53\xca\xb9\x48\x4f\x9e\x9b\x3c\x55\x4a\x4f\xe7\xcf\x1d\x22\x0c\x93\x55\x3c\x9d\xcd\xd9\xd0\xd2\xd9\xfc\xc9\xc9\xfc\xf4\x8b\x04\x09\x23\x87\xc8\xc6\x21\x32\x01\xb0\x17\x68\x2f\xca\x09\x94\x13\x68\x46\x32\x01\x79\x28\x3d\x40\xd5\x03\x54\x3b\x00\x25\xa0\x09\xc0\x24\x13\xa6\x74\xbb\xdd\xaf\x74\xbb\xdf\xed\x76\x3f\x75\x0a\xd1\x07\xd9\xdb\x4f\x36\x48\xd6\x6d\xc8\xfa\x3e\xe0\x7d\x98\xf0\x3e\xf8\xd6\x07\xdf\x50\x9f\x00\xde\xd7\x0b\x3d\xc8\xde\x5e\xe8\xa1\x9c\xe8\x45\xbb\x04\xda\x25\x30\x61\x28\x93\x4c\x34\xca\x09\x94\x49\xf6\xa5\x7b\x7b\x80\xf7\xe0\x51\xe2\x9d\xd5\x47\xf9\x5d\xd2\x35\xc5\x6e\xaa\x69\xab\x4f\x90\xfc\x57\x56\xc9\x68\x46\xe3\xff\x0f\x83\x1d\x7f\xc4\x3e\xaa\xfa\x31\xfa\xa2\x7d\xd8\x44\x7f\x96\xe1\xec\x78\xa1\xdd\xd1\x5c\x47\x23\xf1\x3b\xff\x39\x92\x78\xfd\xa6\xfd\xa2\x46\xe3\x94\xfa\x12\xff\x17\x0f\xfb\x37\x21\xbb\x3b\xfc\xed\xff\xc0\xc3\xfe\x02\xec\xa7\x6c\xf6\x83\x0a\xfb\x17\x3d\xec\xcb\x3c\xde\x6c\xfc\xaf\x7b\xd8\xaf\x29\xc6\x1f\x52\xd8\x3f\xeb\x61\x3f\x85\x7d\x72\x30\xec\x6f\xff\x8c\x87\xfd\x4d\xd8\x9f\xb0\xd9\xef\x50\xd8\xff\xa2\xae\xb6\x3f\x07\x4a\xb5\xda\xe9\x6f\xff\x29\x5d\x6d\x3f\x45\x9f\xff\x6b\x0b\x36\xfb\xbb\x15\xf6\x4b\x1e\xf6\x87\x3f\x49\xf2\xd2\x1e\x7f\xfb\x79\x0f\xfb\x35\xd8\x3f\x6f\xb3\xbf\x47\x61\xff\xd3\x9a\xda\x7e\x2d\x8e\xff\x68\x32\xfe\x5f\xd6\xd4\xf6\x27\xb0\x7e\x27\x6c\xf6\xbb\x14\xf6\xff\x31\x40\xf6\x79\x0e\xa8\xe1\x3d\x32\x67\xec\x7c\xfd\x3e\xec\xa1\xff\x41\x8b\xfa\xff\xee\xa1\x1f\x1e\x68\x4d\xbf\xc7\x43\xff\xe1\x16\xf5\xff\xcf\x43\xbf\xa7\x45\xfd\xa7\x3d\xf4\x7f\xb3\x45\xfd\xbd\xba\x5a\x7f\xbc\x45\xfd\x57\x3d\xf4\x4f\x0e\xa8\xdb\xf3\xfc\x7d\xc0\x43\x3f\xef\xa1\xcf\xcb\xdf\xf4\xd0\x2f\x0d\xa8\xed\xf1\xf2\x22\xee\x9f\xf9\x6f\x16\xfa\x61\xdb\x79\xc2\xfc\x97\x3b\x32\x7e\xe5\x89\xf4\xff\x03\x00\x00\xff\xff\xfe\xb1\x8c\x6e\xa0\x49\x00\x00")

func tcptracerEbpfOBytes() ([]byte, error) {
	return bindataRead(
		_tcptracerEbpfO,
		"tcptracer-ebpf.o",
	)
}

func tcptracerEbpfO() (*asset, error) {
	bytes, err := tcptracerEbpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tcptracer-ebpf.o", size: 18848, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tcptracer-ebpf.o": tcptracerEbpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tcptracer-ebpf.o": &bintree{tcptracerEbpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

