// Code generated by go-bindata.
// sources:
// ../dist/tcptracer-ebpf.o
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tcptracerEbpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x5c\x7f\x6c\x5b\xd7\x75\x7e\x8f\x12\x45\x49\x8e\x2b\xcf\x29\x63\x86\x5b\x00\x75\x5d\x13\x8f\x5b\x5a\x51\x92\x5d\x55\x88\x07\x2e\x9d\x53\x55\xcb\x26\x22\xb0\x1a\xc1\xab\x4b\x31\x0c\x1d\xc9\x74\x6c\x9a\xa4\x2d\xbd\xb0\x59\x0d\xac\xe9\x04\x21\x0b\x64\x2f\x1d\x8c\xcc\x1b\x44\xc9\x69\xd4\xc1\x45\x35\x6c\x85\x3d\x60\x05\xb5\x22\x05\xb4\x21\x2b\x84\x21\x03\x54\x40\x1d\x84\x2e\x28\xb4\x62\x7f\x08\x5d\x66\x68\x41\x50\x8d\xef\x9e\xef\xf2\xbd\x77\xde\x7d\x8f\x94\xdd\x1f\x21\xa0\x9e\xdc\xef\xde\x73\xcf\xb9\xf7\x9d\x7b\xee\x77\xef\x7b\xee\x97\x8e\x3f\xf9\x44\x40\xd7\x35\xf9\xd3\xf1\xc7\x7f\x97\x1f\xb7\xfe\x3b\x81\xff\xfd\xd5\x5a\xcb\xea\x03\x84\xbd\x54\xfb\xfb\x50\xed\xaf\xdc\xb9\xbd\x6b\x96\x8d\x74\x5e\xe0\xe5\xe8\x8e\x28\x57\x17\xa8\x5d\x28\xa0\x69\xdb\xbb\xbb\xbb\xd5\x45\x94\x5b\x34\x6d\xa7\x56\x8e\x30\xa3\xb7\x5a\xad\x7e\x03\x66\x19\xf8\x57\x21\x8d\x43\x49\x66\x77\x48\xd8\xb9\x85\x7e\xca\xd1\x84\xcb\xee\x90\xc2\xce\x4b\x18\x6f\x58\x3b\x24\x6a\x8c\x36\xc2\x9b\xd1\xab\xb9\xae\x3d\x17\xd2\xb4\xee\x9a\x9c\x82\x1c\x0d\x7d\x48\xe7\xfa\x09\x1f\xbb\xd5\x10\x95\xc3\xa1\x10\xd9\xbf\x80\xb2\x1e\xa4\xf2\x02\x1f\x57\x0f\xcd\x6f\x11\xed\x5a\xc6\x84\x1f\xa3\x2d\xbb\xa2\x3f\xe3\x42\x3b\xf9\x7f\x3f\xd5\x7f\xf3\xa3\x24\x23\x35\x3f\x6a\x6e\xec\x4a\xfb\x8f\x7e\xf4\xff\x84\xbc\xd5\x81\x7e\x5f\xdb\xda\x25\xb9\x09\xb9\x0e\xb9\x06\xb9\x0a\xb9\x02\x79\x1b\x72\x19\x72\x09\x72\x1e\xf2\x1a\xe4\x1c\xe4\x0c\xe4\x65\xc8\x69\xc8\x3c\xe4\x04\x8d\x33\x40\xcf\xbb\x1c\xa3\x72\x39\x4a\xf5\xc6\x85\x03\x18\x3f\xe9\x19\x85\x08\x95\x63\x87\xa9\x5d\xec\x32\xf0\x6e\xe0\xdd\xc0\xc9\xae\x91\x3f\x4c\x78\x27\xf9\x63\x5c\xec\xa1\xf2\x49\xf2\xd3\x28\x0d\x88\xb2\x31\x9d\x20\x7c\x16\xe3\x19\xa6\xf1\x18\xd3\x43\x54\x5f\x48\xa2\x7f\x8c\x7f\x76\xd9\x31\x2f\xe9\x42\x49\xd4\x67\x62\x1b\xf0\x67\x1a\x65\x9a\xd7\xea\x6f\xd2\x7c\x4f\x75\x50\xbc\xe4\x5e\x7b\x47\xe0\x53\xb5\x41\x9b\x1e\xe5\x62\x3f\x42\x3f\x79\xe8\xd1\x73\x98\x2c\x5c\x16\xe5\x5c\x6c\x0b\xf5\xcf\x8a\xf2\x73\x01\xea\x27\x6d\x8c\x8b\xf2\xc8\x55\xea\x3f\x6d\x4c\x90\x2c\x9e\xa5\x76\x2d\xd4\x6e\xe4\xcf\xa9\xbe\x3c\x88\xe7\x1a\xa3\xe7\x9a\xd5\x33\x62\xde\xc3\xfa\x1f\x8b\xfa\xb0\xfe\x2a\xad\x8b\x5a\x6e\x30\xf1\xa0\xf6\x77\x02\x97\x71\x98\x8b\x3e\x25\xf4\xba\xbe\x42\xe5\x6a\x85\xa4\x19\xc5\x4f\xd5\xe2\x4c\x3e\xc7\x6a\x86\x70\x33\xde\xcd\x25\x3d\x59\x21\xbd\x5c\x94\xc6\x11\xd4\xe6\x69\x9c\xd1\x01\x3c\x6f\x8a\xef\x4c\x74\x0c\xf2\x7d\xb4\x3f\x01\x79\x07\xed\x26\x50\xbf\x83\xf8\xa0\x78\x90\xf6\xba\xee\x77\xfb\x35\x06\xbf\x5a\x6d\xfe\x18\x17\xba\x1b\xea\xbd\xaf\xd4\x3b\xdc\x50\xef\x84\x6d\x1e\x2c\xbd\x9e\x86\x7a\x77\x94\x7a\x14\x9f\x5d\x0f\xb8\xdb\x4f\xa0\x7d\xbb\x62\xbe\x8d\x0b\x09\x51\x36\x16\x69\xbe\x54\xf6\x76\x14\xe3\x4b\xdf\xc0\xfc\x0f\xd3\xf3\x48\x2f\xd2\x73\xc8\x0c\xf6\x53\x3c\x2e\xe0\x79\xc4\xe8\xb9\x4d\x56\xee\xe0\xf9\x0c\x52\xfb\xd7\xe9\xb9\x64\x4e\x3e\x26\x64\xb8\x35\x27\xec\xc9\x38\x9c\x82\x0c\xb7\x50\x9c\x3e\x2d\xf2\x53\xad\x1c\x38\x4d\x65\x1d\x65\x9d\xe2\xdc\xa8\x0c\x39\x9e\xbb\x95\x0f\xa7\x1d\x79\xc2\x3e\xae\x3c\xc6\x75\x00\xe3\x32\xa5\x3d\x2f\xf7\xb0\x7d\x68\x42\x91\xa7\x83\xda\x53\x42\x86\xf5\x47\x44\x9e\x0d\xeb\xc7\xc4\xfc\x98\xeb\x22\x28\xea\x29\x1f\x48\x7f\x32\x88\xd3\x32\xe2\xb7\xeb\x09\xf7\x7c\x8f\x35\xf5\xbc\xc6\x3c\x9f\xd7\x09\xc5\xf3\x7a\x4e\xc3\xbc\x42\x9a\xe3\xf8\x89\x2d\xdf\x9f\x3a\x10\xaf\xfb\xa9\x0b\xff\x56\xb0\xfe\x7a\x98\xff\xf4\x9c\x8d\x0a\xe5\x55\x55\xbc\xd9\xd7\x03\xf7\x3f\x5d\x41\x9c\x44\x37\xd0\xff\x6f\x38\xfa\x97\xeb\xb7\xab\xcd\xdd\xef\x1d\xdf\xbc\x21\xe3\xeb\x1d\xf4\xfb\x20\xf3\x1b\x79\xa0\xd2\xed\xe9\xf7\x8e\xaf\xdf\x88\xd7\xe8\x26\xfa\xdf\xcf\xfc\x3e\x4d\xfd\x7e\xce\xdd\xef\x69\x5f\xbf\x4f\xc3\xef\x1f\xa1\xdf\x80\xa8\x4f\x57\x4e\xc0\xde\xba\x8b\xa7\x34\x13\x97\x8d\xf8\xd1\x2f\x8d\x97\x45\x7e\xb6\xbc\xac\x8a\x38\x09\xb7\x11\x5f\x69\x96\x97\x19\xa7\x35\x57\xfb\xe6\x78\xd8\x7f\xd3\x38\xea\x3c\xec\xc7\x54\x46\xfe\xb9\x15\xc0\x38\x62\x98\xcf\x02\xda\x05\x3e\x4f\x3c\x2c\xf0\x0e\xf1\xb0\x02\x78\x18\xf8\xd7\x37\xb1\x8e\x23\x3a\xe3\x61\xf7\xff\x87\xe6\x9c\x1f\xec\xcb\x51\xf0\x2d\xac\xd3\x72\x14\x7c\x23\x0a\xbe\x11\x05\x3f\x89\x82\x6f\x45\xc1\xb7\xa2\xe0\x5b\x51\xf0\xad\x28\xf8\x16\xcb\x93\x32\x8f\x96\xa3\xe3\x8e\x7c\x55\x8e\x26\x69\x9c\x2d\xe0\x61\x83\x49\xf0\x84\x31\x8c\x97\x78\x98\x51\x04\xff\x1a\x44\x3f\xb1\x71\xf0\xd2\x6e\xaa\x2f\x81\x6f\x0d\xc3\xee\x20\x78\x5c\xb1\x07\xf5\x03\xa8\x87\x9f\x83\xe0\x6f\xc5\x04\xea\x87\x50\x8f\x71\x0d\x82\xb7\x15\xc1\xbf\x06\xe7\x1d\xf3\x90\x2e\x81\x77\x0d\xbf\x09\x3e\x07\xde\x35\x4c\xf3\x58\x3d\x4e\xf3\x3b\x15\x04\xef\x3a\xf9\x16\xf1\xae\x56\xf0\xae\xe1\xef\xa1\x1f\xf0\xae\x61\x9a\xf7\xc9\xd2\x65\x51\xce\x0d\xaf\xa1\x1e\x7c\xaa\x15\xbc\xeb\x22\xed\x5f\x23\x27\x34\xf8\x7b\x1b\xed\xc6\x45\x39\x7d\x11\x3c\x0d\x76\x47\xe0\x47\xf9\xa4\x7c\x8e\xe0\xaf\x51\xca\x5b\xa3\x81\xeb\x9a\x19\xf2\xd5\x37\xa8\x5d\xa8\x16\x97\xcb\xb5\x78\xe9\x3a\x4a\x65\x7b\xde\xe9\xb6\xed\x6f\xae\x7d\x04\xf9\xbb\x7c\x88\xe2\x50\xe6\xc5\xf2\x21\xf4\xe3\xb3\xee\x93\xca\x7d\xf0\x4f\x69\x1c\xed\xd8\x67\x20\x47\xdb\x89\x00\x5a\xf1\xdb\x5c\x7c\xc9\xf1\x96\xa3\xdb\x90\x38\x7f\x20\xff\xe6\xa2\xef\x41\xee\x00\x5f\x77\xf0\x41\xe3\x02\xc5\x01\xe7\x51\xa6\xff\x07\x3c\xe6\xa9\xdd\x3e\x3f\x3e\xfa\x11\xa6\xbf\xbd\x07\x7d\xbb\xde\xd6\x1e\xed\xb6\x33\xfd\x4d\xa5\x7e\x63\xde\xf9\xde\x5d\xf2\xce\x9d\x3d\xf2\xce\xf5\xa6\x78\xcc\xba\x27\x8f\x51\xf2\xea\xaf\x23\x2e\x5e\xa3\x38\x31\x96\x10\x1f\xb3\xc8\x3f\x6f\x20\x4e\x5e\x40\xbe\xf9\x1a\xce\xab\x67\x26\xc0\x4b\x11\x37\xb1\x3c\x78\xe9\x0e\xe2\xa8\xc0\x78\x6c\x89\xf2\xc2\x9f\x90\x3f\xf2\x5c\x14\x6e\xf9\x6d\xc7\x3c\x8d\xd4\xcf\xd9\x74\x70\xb3\x78\xea\x23\x54\xae\xf3\xd4\x8f\x89\x32\x3f\xa7\xf3\xf5\x6d\xf1\xd8\x6e\x17\x5f\x3d\xac\xe0\xab\xa3\x1d\x41\x51\xcf\xd7\x1d\xad\x4f\x6b\x1f\x79\x28\x42\x1b\xe5\x68\xe8\x3e\x6a\xdf\x86\xf6\x6d\xea\xf6\xa7\x1e\xa0\x0d\xcf\x9e\x07\x92\x2c\x0f\x74\x2b\xf3\x40\xdb\x5d\xe9\xed\x95\xaf\x98\xd2\x8c\xab\x72\x67\x82\xf1\x07\x8a\x27\xe3\x39\xca\xbb\xc6\x44\xde\xe5\xcf\xba\xdf\x3e\x8f\xfb\x8e\x70\x07\x59\x76\xdf\xdf\x5c\xa5\xfd\xfb\x0a\xb5\x1b\xd5\xe7\xc4\xbe\x6e\xd9\x1f\x42\x3c\x2d\xef\x89\xc7\x84\xc1\xfb\x0c\xd4\x9b\xe7\x07\xb3\xdf\xa0\xd6\x01\x9c\xf6\x3b\x19\x8f\xaa\xf5\xb2\xac\x58\x9f\x93\x15\xf2\x63\x54\x7f\x91\xe6\xb5\xce\x87\x9d\xbc\x20\x03\x7f\x33\xc8\xb7\xb9\x7a\x9e\x7d\x7f\xd7\x3e\xae\x0c\xf2\xb0\x71\x25\xd2\xb4\x3f\x8e\xf5\x7b\xa5\xbb\xa1\xde\xb6\x52\xef\x70\x43\xbd\x4d\x55\x7e\xba\xd2\xd3\x50\xef\x7d\xa5\x1e\xf2\x5a\xc4\xdd\x7e\xc8\x9e\xd7\xd0\xaf\xa5\x97\x10\x65\x63\x71\xc8\x33\xaf\x6d\x29\xcf\xd3\x98\x7f\xf0\x99\xf4\xe2\x36\xf2\xd0\x75\xe4\x2d\x3c\x8f\xd8\x3c\xf2\x96\xbc\xf7\x58\xa0\xf6\xaf\xd3\x73\xc9\x9c\xbc\x21\x64\xb8\xf5\x98\xb0\xe7\x3e\x4f\x0f\x0a\xdc\xca\x53\x34\x4e\x2b\x4f\x11\x91\xb0\xc7\xed\x35\xdf\xb8\x75\x9e\x0f\xbd\xf8\xa8\x2a\x2e\xc4\x3e\xda\xe2\x9c\x3f\x53\x9a\x19\x4d\x9e\x0b\x8c\x45\x5a\xdf\x7c\x1c\x92\x77\xca\xf3\xaa\xbc\x0f\x4a\x57\xfe\x1e\x71\xfa\x79\x94\x65\x7c\xe7\x51\xbe\x8e\x72\x09\x65\x9a\xcf\xea\x41\xf2\x63\x03\xf9\x35\x17\x23\x5e\x3a\xa5\x53\x79\x03\x32\x17\x7d\x01\x7a\x37\xd0\xcf\x17\x91\xb7\x57\x1c\xbc\xc6\xa8\xdc\x76\xf0\x9b\xea\x0d\x8c\xbf\x95\xe2\xa7\x9a\xa6\x72\x24\xe0\x9c\xd7\x5b\xb5\xc1\x0f\x60\x1e\x1e\x6c\xf2\x39\x88\xfc\x83\xb2\xcc\x97\x1f\xfc\x7c\xf4\x5f\xbb\x9d\xda\xdd\x9c\x6b\x86\xd8\x79\xc6\xc9\x0f\xdd\xbc\x70\xd3\xc9\x0b\xaf\x24\x95\x7e\xab\x78\xe1\x90\x8a\x5f\xf9\xe8\x73\x5e\x78\x6d\x0f\xfa\x0d\xf9\xa4\x8f\x5d\xce\x0b\x95\xbc\xb2\x89\xfc\xa9\xe4\x85\x4d\xe4\x4f\x25\x2f\xf4\xc9\x9f\x9b\x4d\xe5\xcf\xcd\xbd\xf1\xc2\x3a\x6f\xa2\x38\x31\x5e\x47\x7c\x9c\xa4\xf8\x19\x09\x6b\xe8\x17\xf1\x32\x48\xf1\x65\xdc\x00\x5f\xc4\x39\xd0\xe2\x87\x6b\x8c\x1f\xfe\x1b\xad\xfb\x79\xf0\xc3\xce\xb7\x29\xcf\x06\xe9\xdc\x39\xd2\x4f\xfd\x87\x5b\x5f\x11\x65\x2b\xbf\xbe\x4c\xe5\x7a\x7e\x9d\x75\xad\xc3\x65\xdf\x75\xf8\x65\xc6\x6f\xd4\xe7\x7a\x55\xdc\xfd\x7c\xf2\xeb\x75\x47\x7e\x35\xb0\x9e\x8d\x05\xac\xd3\x98\xf3\x1e\x41\xe6\x45\x63\x01\xeb\x3a\xe6\xbc\x77\x30\x2a\x6b\x1e\xf9\x97\xe6\x95\xf2\xa3\xc5\x4b\xab\x1f\x26\x99\xa2\x6b\x43\x71\x3e\x17\xf9\x19\x32\x37\x7c\xb5\x9e\xb7\xbb\x85\x9f\xaf\xc2\xce\x12\xcb\xcf\xf3\x77\x9d\x9f\x93\x9a\x3a\x3f\xab\x9e\x63\x50\xfb\x7d\xea\x1f\xfc\x95\xf3\x54\xeb\x1e\x6c\xa0\x5e\x16\xeb\x82\x8e\xe5\x9a\x31\xb9\x47\xfe\x5a\xbf\xa7\x2a\x89\x16\xf2\x9e\x6a\x54\x2f\xe8\x66\x28\x94\xcf\xd0\xb9\xa3\x8a\xf7\x32\xb7\x60\xa7\x3c\x4b\xcf\x27\x33\x4b\x71\x2d\xcf\x75\x55\x9c\x7b\x54\xeb\x70\x55\x79\xfe\x4c\x90\xdf\x8b\xab\x9e\xeb\xf7\x6d\xc5\xfa\x2d\xcf\x52\x1c\xe6\x66\xe7\x5d\xeb\xc3\xef\x5e\xae\xe9\x7d\xca\x67\x1c\xf3\xca\x7d\x6a\x1e\xfb\x54\x81\xf1\x66\xe7\xfa\xcb\xe0\x3e\xcd\x9b\x37\x27\x9c\xbc\x59\xbe\x87\xf2\xf1\x67\xce\xef\x3d\x94\x8f\x9e\x92\x37\xcb\xfb\x00\x1f\x3d\x25\x6f\x96\xf7\x01\x3e\x7a\x4a\xde\x2c\xef\x03\x1e\x74\xb7\x4f\xd8\xf3\x3e\xfa\x75\xc7\x4d\x62\x8f\xbc\x19\xf3\x8f\xf7\xb0\x16\x6f\xbe\xc1\x78\xf3\x12\xe3\xcd\x7f\xc3\x78\xf3\x4d\xf0\x66\x5a\x40\x6e\xde\x4c\x07\x54\x2b\xaf\x53\xdc\xc9\xbc\x3e\xaa\xbb\xcf\xbd\xf3\x3e\x7c\x2d\x88\xcf\x28\xac\x7c\x8c\x3c\xcc\xce\xe5\xe5\x33\xd6\xfd\xb8\xa9\x97\xc1\xfd\x98\x51\x19\x60\x79\xee\x04\xdb\x27\x9c\xf7\x6a\x92\xe7\x66\x90\xff\x2c\xfe\x7a\x16\xe5\x25\x8f\x3c\x9c\xf7\xe0\xc1\xb8\x2f\xa9\xdc\x74\xf0\x69\xd5\x7b\x2c\xc7\xfb\x35\x5b\x9e\x35\xe3\xc1\xa8\xf4\xd8\xf2\xbc\xf5\x93\xf7\x2b\x9c\x0f\x07\xb5\xef\x6b\xce\x71\x22\x6f\x44\x3f\x68\x79\xe3\x4d\xcd\xc9\x6f\x9b\xbd\xa7\x4f\x40\xce\xdd\x1d\xbf\x95\xf7\x87\xcc\x6f\x15\xbf\x4d\xf8\xdd\x3f\x2a\xf4\x39\xbf\x9d\xdb\x83\x7e\xd3\xf7\xa5\x0a\xbb\x4d\xf1\xdb\x26\xf2\x9c\xef\xbd\xa7\x8f\x9e\xef\xbd\xa7\x22\xcf\x6d\x36\x95\xe7\xf6\xc8\x6f\x6f\x20\x2e\xe4\xf7\x26\x8b\x88\x8f\xc1\x25\xf0\x2b\xc4\x49\x0c\x7c\xac\xb2\xe5\x88\xb7\xc9\x79\xc4\x4d\x27\xde\x5b\xe0\xfd\x7b\xee\xe4\x77\x68\x1d\xbf\x01\x5e\xfb\x02\xbd\x1f\xa9\x7e\x92\xfc\x19\xf9\x0c\xc9\x70\x28\x4b\x7e\xe2\xfd\xc0\xc8\x23\x12\x7f\x46\xc8\xa7\x35\xe4\x45\x6d\x9c\xca\x41\x94\x83\x5f\x10\x65\xba\xa5\xac\xad\x8b\x56\xdc\x57\xb2\xfc\x1a\x11\xe9\xd5\x76\x5f\xf9\x69\xdc\x57\x06\x4e\x51\x7b\xe4\x39\x99\xef\x38\x2f\x3c\xf5\x91\xb1\xfa\x3c\xff\x62\xf2\xe9\x4d\x96\x4f\xff\xd1\x91\x4f\x25\xef\xf5\xca\xa7\x91\x90\xd3\x7f\xd9\x2e\x85\xf7\x85\x53\x68\x6f\xe9\x15\x98\x7f\xcd\xe5\x5b\xa3\x82\x7b\x8f\x05\xf0\x71\x7c\xe7\x51\xc5\x79\x65\x0a\xef\xa9\xaa\xb4\x0c\x5c\xdf\x09\x54\x71\x6e\x0a\x6b\xe0\x2d\xb2\xdc\x4a\x84\xb6\x4a\xaf\xfb\xea\xcf\xdf\x6a\x7f\xd0\x51\x9f\xca\x6b\x4e\x7d\xc1\x7a\xef\x7d\x3f\x90\xe3\xf3\x1c\xd7\x41\xa7\xdd\xcc\xa0\xe4\x0b\x74\x2e\xd8\x08\x62\x7e\xf1\x9d\x97\xf7\xfc\xbf\xc6\xe6\xff\xba\x6b\xbf\x31\xf3\x61\x50\xd3\x5d\xb8\x1f\x0f\xe0\xf7\x36\xbf\xa8\xf8\x95\xe7\x1f\x63\x01\xfb\x4f\x2c\xcf\xce\x47\xfc\x5c\xe7\x7c\x4f\xec\x1d\xdf\x33\xb6\xe7\x67\x8b\x6f\xe4\xb9\x14\xde\x77\x4f\x61\x3f\xda\x80\xcc\x0d\xce\x32\xff\x5f\xfe\xb9\xf1\x89\xa4\x98\xe3\xff\xfd\xa9\xc0\x5d\xe7\x32\x7c\x27\x32\xc9\xbf\x53\xa0\x79\xe3\xe7\xb3\x70\x07\x1d\xa4\xec\xcf\x5b\xf5\x5d\x84\xfb\x7c\xf6\x25\x21\xad\xf3\xd9\x8b\x1a\x9d\xcf\x70\xee\xc6\x77\x0d\xb9\x33\xf8\xae\xe5\xcc\xbb\xd8\xdf\x1b\xef\x57\xef\xee\x61\x9f\x0b\xe1\x3d\x7e\xa3\xef\xcb\xca\x67\xc0\x93\xcf\xe0\xbb\x86\x26\xce\x87\xea\x7d\x3a\x41\xe3\x5e\xdc\xf2\xdc\xff\x54\xe7\x98\xf2\x99\x6b\x98\x87\x71\xd7\xfa\xf2\xbf\x9f\xe6\x3c\x2f\x40\xdf\x7f\x7c\x8d\xe6\x39\x28\x58\x5a\x73\x7c\x6f\x5c\xc9\xf7\xe4\x7b\xc6\x24\x78\xdf\x13\xf5\x7a\x5a\xc7\xe4\x37\x7f\x3f\x57\xc6\x39\xd7\x8c\x3b\xb3\xbd\x3c\x57\x5a\xe7\x4c\x9c\xc7\xa3\x6f\x42\xae\x40\xca\x7d\xe6\x36\xa4\xbc\xef\x96\xef\x6f\x6e\x62\x3f\xc2\x39\x28\xfa\x16\xd6\xeb\x18\x5b\x5f\x37\xf1\x1c\x1b\x9f\x47\x57\x7c\xce\xa3\x2a\xfe\xf3\xa6\xfd\x3b\x2a\xc6\x7f\xac\xef\xb4\x70\xdf\x56\xa1\xb8\xb6\xce\x15\xff\xe2\x5a\xf7\xcb\xca\x7d\xcd\x99\x7f\xe4\x77\xae\x53\x90\xe1\x00\x0d\xc4\x9e\x07\xcc\xa9\x7d\xf4\x20\x6d\x48\xe9\xca\xaa\x43\xdf\x3a\xd7\xe1\xfd\x28\xe3\x1b\xf4\x5d\x8f\x5e\xd3\xc7\x77\x3b\xb6\xbc\x73\xcd\xe7\xbe\x48\xde\x6f\xf2\x7d\xcb\xfb\xbe\x1e\x71\x1e\xbd\xd7\x38\xdf\xfb\x79\xc6\x2f\xbe\xe5\x7d\x7d\xe3\xb8\xc6\x3d\x6c\xc3\xf8\x96\xe7\x96\x0d\x48\xf9\xfd\xc6\xdb\x90\x6b\x8e\xf8\xfd\xd9\xad\x07\xfa\x3e\xd0\x58\xc2\x7a\x80\xdf\x99\x59\xb9\x1e\x1a\x9f\x5f\xd6\xee\xf1\xfc\xb2\xbe\x47\x7d\x7e\x6e\x5b\xf1\xd1\x97\xeb\x31\xd4\xe1\x3e\xaf\xad\xfa\x9c\x4b\xac\x75\xb9\xe9\xb1\x2e\x7f\xd8\xe4\xba\x5c\x05\x6f\xa0\xe7\x33\x1a\xc0\xbd\x08\xc6\xd3\x98\xf7\x23\x5e\xf1\x5d\x88\x71\x83\xe2\x60\xb4\x15\xef\x25\x8f\xa0\x1f\x7c\x2f\x25\xbf\xd7\xa2\x2c\x66\x3b\x0f\x04\x7b\xea\xe3\xa3\x78\x45\x9e\x7e\x03\xf1\xf9\xc2\x04\x8b\x4f\xe2\x3f\x99\xd9\x12\xe3\x4d\x4e\xde\x93\xae\xc8\x78\x9c\x41\x59\xc6\xef\xcb\x28\xcb\xfb\xbf\xb9\x7a\xbe\xa5\xf9\xbb\xca\xe2\xf0\x55\xd7\x7c\x4e\x2b\xe7\x73\xa6\x41\x9e\xbb\xe4\xe2\x3b\x94\xe7\x8a\xb0\x37\xe7\x91\xe7\xce\xd3\xfa\xf5\xcc\x73\x39\xd2\xb3\xe5\xb9\x71\xbf\x3c\x87\xef\x60\x64\x9e\x0b\x6a\xcf\x08\xfd\x91\x8f\x10\x1e\xd6\xd3\x54\xfe\x34\xca\x2d\x29\xc7\x7c\xb9\xfd\xfb\xa3\x06\xfe\x3d\xed\xf2\xcf\x2f\x0f\xcb\xf7\xf1\x16\xff\xfb\x43\x51\x6e\xb5\xfd\x69\xf8\x06\x45\x85\x99\x73\xda\x8e\xbf\x46\x98\xf9\xdc\x22\x0c\x3b\xac\xc0\x4c\xbd\x19\xa9\x5f\xfb\x7d\x26\xf9\xa4\xf6\x53\xdb\xb7\x9f\xaa\xdf\xb7\xc4\xfb\x9c\xa0\x96\x6f\x73\xe2\x1f\x03\x9e\x0c\x39\xf1\x7f\x0a\x10\xde\xde\xee\xc4\x5f\x06\x3e\xdd\xe2\xc4\x3b\x81\x2f\xb3\x7e\xde\xd6\x09\x9f\x60\xfd\x7c\x1b\xf8\x1c\xf3\xe7\x75\xf8\xb3\xc2\xda\x5f\x04\xbe\xc6\xf0\x63\x12\x67\xfe\xbc\x85\xfe\xb1\x8d\x59\xfd\x03\x3f\xc0\xf0\x7f\x15\xfa\x1d\xda\x26\xeb\x87\xae\x6b\x3b\xb4\xcb\x6c\x5c\xdf\xd2\x09\xe7\xe3\xfd\x36\xfa\xd9\x62\xf8\x77\xd1\x3e\xc2\xfc\xff\x6b\xe0\x87\x19\x3e\x2a\xfa\xd9\xa7\xf5\x04\x9d\xf8\x3f\x04\x08\x9f\x61\xf8\x97\x81\xcf\x31\xfc\x3d\x9d\xf0\x75\x86\x1f\x41\xff\x11\x86\x3f\x04\xbc\x9b\xe1\x0b\xe8\x7f\xc7\x09\x6b\xa7\x80\xf3\x7f\xdc\xf7\x9f\xb0\x3b\xc4\xf0\xef\x8a\xfe\xf7\x6b\x5b\x6c\x9e\xbf\x01\x7c\x87\xe1\x2f\x02\x8f\xb4\x3a\xf1\x3f\x00\x9e\x64\x7e\xfe\x6d\x80\xf0\x25\x86\x7f\x11\xf8\x32\xc3\x7f\xa2\xc3\x2e\xc3\xff\x0a\xfd\x6f\xef\x73\xe2\xcf\x03\x6f\x67\xf1\x13\x06\x3e\xc0\xf0\xb3\xb0\x3b\xc1\xf0\x3f\x43\xfb\x19\xd6\x7f\x16\xf8\xe1\xfb\x9c\xf8\xa3\xc0\x13\xcc\xcf\xfd\x72\x7e\x58\xfb\x36\xe0\x79\x36\xff\x7f\x09\x7f\xa6\x19\xfe\x39\xe0\x2b\x0c\x3f\x2e\xfa\xe9\xd2\x66\xd8\xfc\x7f\x3d\x40\xf8\x26\xc3\x4b\xc0\xb7\x18\xfe\x63\x9d\x70\x1e\xcf\xdf\x00\x7e\x8d\xad\x97\xaf\xc2\xee\x26\xc3\x9f\x45\xff\xe3\x6c\x3e\x5f\x42\xfb\x3c\xb3\x7b\x0a\xf8\x34\xc3\x5f\x45\x3f\x3b\x6c\xbc\x23\xc0\xdb\xd9\x3e\xb0\x01\x3f\xc7\x18\xfe\x92\xd8\xa7\x23\x1a\xff\x3d\x2c\xf0\x07\x5d\xf8\x0f\xc5\x3e\x7d\xbf\x0b\xff\x2d\x81\x7f\xd8\x85\x7f\x41\xf4\xb3\xdf\x85\x7f\x42\xe0\xfb\x5c\xf8\x77\x34\x13\x6f\x71\xe1\x27\x05\x1e\x72\xe1\x21\x81\x77\xb9\xf0\x25\x81\x07\x5d\x78\x42\xe0\x1d\x2e\xfc\x7b\xc2\xff\x5f\x71\xe1\x87\x04\x7e\xd0\x85\x87\x85\xff\x87\x5c\xf8\x8e\x68\x1f\x76\xe1\xbf\x2b\xf0\x07\x5c\xf8\x10\xa4\xf9\x78\x1e\xd3\x88\x43\xd8\xcb\x79\x56\x5e\xb6\x95\xcd\x2b\xea\xb1\x36\xab\x6c\xf6\xb5\xdd\xee\xac\xb7\xf7\x7f\x8c\xf5\x7f\x8c\xf5\x6f\x96\xe7\x59\xff\xab\x2d\xce\xf2\x5a\xc8\x69\xaf\xdd\x66\xef\xb3\x9a\x86\x7f\xf5\x65\xd3\x67\xe5\xcb\x2d\x4e\xfd\x75\x1b\x2f\x38\x6e\xf6\x17\x74\xd6\x8f\x05\x9d\xfa\x9b\xcc\xde\x74\xa7\x55\x36\xff\x49\xd9\x52\xa7\xbf\x3f\x09\xdd\x59\xde\x61\xfe\x74\x07\x9d\xfe\x4c\x33\xfb\x3d\xfb\x9c\xf5\xda\x7d\x4e\x7b\xf9\xfd\x4e\x7f\xc6\xf8\x7c\x30\xfb\x49\x36\xfe\xe5\x56\x67\xbd\xcc\xc7\xb2\x7e\xbd\xc3\xd9\xbf\xf6\xf1\x52\x76\xba\xa4\xe5\x0a\xd9\x52\xbe\x70\xfe\x99\x6c\x2a\x35\x79\x2e\x5b\x4a\x65\x8a\xb9\x54\x3a\x93\xc9\xe6\x4b\xda\xc7\x0b\xd9\xb3\xf5\xea\x4f\xf0\x5a\x9b\x62\x29\x93\x4f\x5d\x3a\x9a\xca\x9c\x3f\x77\x2e\x9b\xa9\xd5\xa8\x61\x67\x77\xaa\x4a\x65\x0d\xb7\xd3\xaf\xb6\xd3\xef\x67\xa7\xdf\xd3\x8e\x55\xf3\x7c\x3a\x5f\x34\xb1\x52\x21\x9d\xc9\x16\x52\xc5\x52\xba\x74\xb1\xa8\xa5\x2e\x65\x0b\xc5\xc9\xf3\xe7\x1c\xc6\x8a\xb5\x99\x30\xeb\xb3\xbc\x3b\xab\xc2\xde\x3c\x73\xf6\x7c\xd1\xd5\x94\xc0\xd4\xd9\xc9\x4c\xf6\x9c\x59\x5b\x2c\x15\x4a\xe9\x67\x6a\xd2\x78\xde\x94\x4f\x3e\xfe\x78\x5f\xea\x53\xa6\x88\xa7\x7a\x85\x3c\x9a\x8a\x7f\x8a\xe0\x38\x70\x59\x1e\x40\x33\xc8\xf8\x00\x35\xff\xa4\x29\xfa\x49\xd4\x94\x85\x3c\x02\xd9\x0f\xd9\x07\x19\x37\xa5\x9c\x81\x54\xf6\x52\xf6\x5c\x29\x35\x99\xbf\x74\x94\x30\x4c\x51\xf1\x7c\x26\x67\x43\x4b\x17\xf3\x67\xb3\xf9\xc9\x67\x09\x12\x46\x8e\x92\x8d\xa3\x64\x02\x60\x2f\xd0\x5e\x94\xe3\x28\xc7\xd1\x8c\x64\x1c\xf2\x68\xea\x08\x55\x1f\xa1\xda\x23\x50\x02\x1a\x07\x4c\x32\x6e\x4a\xb7\xdb\xfd\x4a\xb7\xfb\xdd\x6e\xf7\x53\xa7\x10\x7d\x90\xbd\xfd\x64\x83\x64\xcd\x86\xac\xef\x03\xde\x87\x09\xef\x83\x6f\x7d\xf0\x0d\xf5\x71\xe0\x7d\xbd\xd0\x83\xec\xed\x85\x1e\xca\xf1\x5e\xb4\x8b\xa3\x5d\x1c\x13\x86\x32\xc9\x78\xbd\x1c\x47\x99\x64\x5f\xaa\xb7\x07\x78\x0f\x1e\x25\xde\x48\xdd\xdb\xef\x15\x5d\x53\xec\xa2\xb5\xfc\xf8\x3b\x24\xff\x9d\x55\x32\x1a\x51\xff\xff\xbb\x60\xc7\x1b\xb1\x7f\xaa\x7e\x8c\x9e\x68\xef\x35\xd0\x9f\x66\x38\x3b\x3e\x68\x77\x34\xd7\xd1\x47\xfc\x26\x1e\x23\x89\xd7\x6b\x5a\x54\xa3\x71\x4a\x7d\x89\xff\xc0\xc3\xfe\x6d\xc8\xee\x0e\x7f\xfb\xdf\xf7\xb0\x3f\x0d\xfb\x49\x9b\xfd\xa0\xc2\xfe\x55\x0f\xfb\x32\x7f\x37\x1a\xff\x2b\x1e\xf6\x57\x15\xe3\x0f\x29\xec\x5f\xf4\xb0\x9f\xc4\xfe\x38\xd0\xee\x6f\xff\x82\x87\xfd\x75\xd8\x1f\xb7\xd9\xef\x50\xd8\xff\xac\xae\xb6\x3f\x03\x2a\xb5\xd2\xe9\x6f\xff\xb8\xae\xb6\x3f\x40\x9f\xf7\x6b\x73\x36\xfb\xfb\x14\xf6\x4b\x1e\xf6\x87\x1e\x22\x79\x6d\xbf\xbf\xfd\xbc\x87\xfd\x55\xd8\xbf\x6c\xb3\xbf\x5f\x61\xff\x61\x4d\x6d\x7f\x33\x86\xff\x68\x30\xfe\x5f\xd7\xd4\xf6\x87\xb0\x7e\xc7\x6d\xf6\xbb\x14\xf6\xff\x39\x40\xf6\x79\x0e\xd8\xc4\x7b\x62\xce\xd4\xf9\xfa\x3d\xe8\xa1\xff\x6e\x93\xfa\x3f\xf0\xd0\x6f\x3f\xd2\x9c\xfe\xc3\x1e\xfa\xbf\xd6\xa4\xfe\xff\x78\xe8\xf7\x34\xa9\xff\x98\x87\xfe\xef\x35\xa9\x7f\x40\x57\xeb\x8f\x35\xa9\xff\x15\x0f\xfd\xb3\x47\xd4\xed\x79\xfe\x7e\xc4\x43\x3f\xef\xa1\xcf\xcb\x7f\x81\xfb\x61\xfe\x9b\x86\xfe\xb6\xed\xdc\x61\xfe\xcb\x1a\x19\x7f\xf2\x24\xf9\xff\x01\x00\x00\xff\xff\x0a\x41\x88\x10\x40\x49\x00\x00")

func tcptracerEbpfOBytes() ([]byte, error) {
	return bindataRead(
		_tcptracerEbpfO,
		"tcptracer-ebpf.o",
	)
}

func tcptracerEbpfO() (*asset, error) {
	bytes, err := tcptracerEbpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tcptracer-ebpf.o", size: 18752, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tcptracer-ebpf.o": tcptracerEbpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tcptracer-ebpf.o": &bintree{tcptracerEbpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

