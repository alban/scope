// Code generated by go-bindata.
// sources:
// ../dist/tcptracer-ebpf.o
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tcptracerEbpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5c\x7f\x6c\x5c\x57\x56\x7e\x6f\xec\xc9\xd8\x6e\xb3\x36\x69\xa7\x71\x06\x16\xcd\x52\xd8\x9a\x81\xee\xda\x8e\x93\x78\x4d\x97\x9d\xcd\x6e\xb7\x83\x55\x61\xab\x8a\xa9\x15\xb5\x8c\x67\xa7\x4e\xed\x4c\x36\x99\x8c\x27\xb5\x5f\x67\x05\x11\xd0\x25\x58\xab\x95\x53\x0a\x32\x55\x16\x79\x62\x87\x1a\x28\xd4\xd2\x02\xc9\x1f\xa0\x31\xab\x22\x2c\xb4\x02\x0b\x45\xc8\x48\x06\x59\x10\xad\xcc\xaa\x42\x06\x55\x91\xb7\x8a\x30\xf3\xee\xf9\xee\xbc\x77\xcf\xbb\xef\xcd\x38\xc9\xee\x8e\xe4\x9e\x9e\x73\xef\xf9\x71\xef\x3b\xf7\xdc\xef\xde\xf7\xda\x5f\x7f\xf6\xf9\x2f\x85\x4c\xd3\x90\x3f\x13\x7f\xfc\x77\xeb\xf3\xce\xbf\x27\xf1\xcf\x1f\xaf\xf6\xac\x3c\x41\xb2\x37\xaa\x7f\x1f\xab\xfe\x95\xda\x76\xf6\x6c\xde\xca\xe4\x85\xbc\x14\xdb\x15\x7c\xe5\x3a\xf5\x8b\x84\x0c\x63\x67\x6f\x6f\xaf\xb2\x08\xbe\xc9\x30\x76\xab\x7c\x27\x73\x7a\xb3\xd9\xb1\x1b\xb2\x79\xc8\x7f\x0f\xd4\x3a\x3c\xcc\xfc\xa6\x84\x9f\x9b\xb0\x53\x8a\x25\x3d\x7e\x53\x1a\x3f\x6f\x60\xbc\x51\xe3\xb0\x68\xb1\x0e\x90\xbc\x11\xbd\x6a\xe8\xc6\xab\x11\xc3\x88\x57\xe9\x34\xe8\x48\xe4\x63\x26\xd7\x4f\x06\xf8\xad\x44\x88\x8f\x46\x22\xe4\xff\x22\x78\x33\x4c\xfc\x75\x3e\xae\x6e\x9a\xdf\x29\xf4\x6b\x1a\x15\x71\x8c\x34\xed\x09\x7b\xd6\xc5\x16\x8a\xff\x31\x6a\x7f\xef\x49\xa2\x9d\xd5\x38\xaa\x61\xec\x49\xff\x4f\x3f\xf9\x7d\x41\x6f\xb6\xc2\xee\xdb\xdb\x7b\x44\xb7\x40\x37\x40\xd7\x41\xd7\x40\x57\x41\x6f\x81\xae\x80\x2e\x83\x2e\x80\xce\x83\xce\x81\x5e\x01\xbd\x0c\x3a\x03\x9a\x07\x9d\xa0\x71\x86\xe8\x79\x97\x12\xc4\x97\x62\xd4\x6e\x5d\xec\xc0\xf8\x49\xcf\x2a\x74\x12\x9f\xe8\xa2\x7e\x89\xcb\x90\xc7\x21\x8f\x43\x4e\x7e\xad\x7c\x17\xc9\xdb\x28\x1e\xeb\x52\x37\xf1\xa7\x29\x4e\xab\xd8\x2f\x78\x6b\x26\x49\xf2\x59\x8c\x67\x90\xc6\x63\xcd\xa4\xa8\xbd\x30\x0c\xfb\x18\xff\xec\x8a\x32\x2f\x99\x42\x51\xb4\x67\x13\x9b\x88\x67\x06\x3c\xcd\x6b\xe5\x67\x69\xbe\xa7\x5b\x29\x5f\x72\x6f\xdf\x11\xf2\xe9\xea\xa0\xed\x88\x72\x89\xef\xc2\x4e\x1e\x7a\xf4\x1c\x26\x0b\x97\x05\x9f\x4b\x6c\xa3\xfd\x15\xc1\xbf\x1a\x22\x3b\x19\x6b\x4c\xf0\x43\x6f\x92\xfd\x8c\x35\x41\x74\xea\x1c\xf5\x6b\xa2\x7e\x43\xbf\x4b\xed\xa5\x01\x3c\xd7\x04\x3d\xd7\x71\x33\x2b\xe6\x3d\x6a\xfe\x9a\x68\x8f\x9a\x6f\xd1\xba\xa8\xd6\x06\x5b\x1e\x36\xbe\x25\xe4\x32\x0f\x73\xb1\x17\x84\x5e\xfb\xd7\x88\xaf\x94\x89\xda\x59\xfc\x42\x35\xcf\xe4\x73\xac\x64\x49\x6e\xe7\xbb\xbd\xa4\x27\xcb\xa4\x97\x8b\xd1\x38\xc2\xc6\x02\x8d\x33\xd6\x8f\xe7\x4d\xf9\x9d\x8d\x8d\x82\xde\x43\xff\x53\xa0\x77\xd1\x6f\x02\xed\xbb\xc8\x0f\xca\x07\xe9\xaf\xfd\x31\x6f\x5c\xa3\x88\xab\xd9\x15\x8f\x75\x31\x5e\x57\xef\x9e\x56\xaf\xab\xae\xde\x29\xd7\x3c\x38\x7a\xdd\x75\xf5\xee\x6a\xf5\x28\x3f\xdb\x9f\xf0\xf6\x9f\x40\xff\x16\xcd\x7c\x5b\x17\x93\x82\xb7\x16\x69\xbe\x74\xfe\x76\x35\xe3\xcb\x2c\x61\xfe\x07\xe9\x79\x64\x16\xe9\x39\x64\x07\xfa\x28\x1f\xaf\xe3\x79\x24\xe8\xb9\x4d\x96\xef\xe2\xf9\x0c\x50\xff\x1b\xf4\x5c\xb2\xa7\x9f\x11\x34\xda\x9c\x13\xfe\x64\x1e\x4e\x83\x46\x9b\x28\x4f\x5f\x14\xf5\xa9\xca\x87\xce\x10\x6f\x82\x37\x29\xcf\xad\x72\x4a\x79\xee\x4e\x3d\x9c\x51\xea\x84\x7b\x5c\x79\x8c\xab\x03\xe3\xb2\xa9\xbb\x2e\x77\xb3\x7d\x68\x42\x53\xa7\xc3\xc6\x0b\x82\x46\xcd\xa7\x44\x9d\x8d\x9a\x9f\x15\xf3\x63\xaf\x8b\xb0\x68\xa7\x7a\x20\xe3\xc9\x22\x4f\x4b\xc8\xdf\xf6\x2f\x79\xe7\x7b\xb4\xa1\xe7\x35\xea\xfb\xbc\x4e\x69\x9e\xd7\xab\x06\xe6\x15\xd4\x1e\xc7\xff\xba\xea\xfd\xcb\x1d\x3d\xb5\x38\x4d\x11\xdf\x2a\xd6\x5f\x37\x8b\x9f\x9e\xb3\x55\xa6\xba\xaa\xcb\x37\xf7\x7a\xe0\xf1\x67\xca\xc8\x93\xd8\x26\xec\xff\xb4\x62\x5f\xae\xdf\xf6\x03\x5e\xbb\x77\x03\xeb\x86\xcc\xaf\x3b\xb0\x7b\x84\xc5\x8d\x3a\x50\x8e\xfb\xc6\xbd\x1b\x18\x37\xf2\x35\xb6\x05\xfb\x07\x59\xdc\x67\xc8\xee\xaf\x78\xed\x9e\x09\x8c\xfb\x0c\xe2\xfe\x2e\xec\x86\x44\x7b\xa6\x7c\x0a\xfe\x36\x3c\x38\xa5\x91\xbc\xac\x87\x8f\x7e\x64\xb8\xac\xf3\xe1\xe2\xb2\x0a\xf2\x24\x7a\x80\xf0\x4a\xa3\xb8\xcc\x3a\x63\x78\xfa\x37\x86\xc3\x3e\xa0\x71\xd4\x70\xd8\xf7\x88\x47\xfd\xb9\x19\xc2\x38\x12\x98\xcf\x02\xfa\x85\x5e\x22\x1c\x16\xba\x43\x38\xac\x00\x1c\x06\xfc\xf5\x1e\xd6\x71\xa7\xc9\x70\xd8\x63\xff\x6e\xa8\xf3\x83\x7d\x39\x06\xbc\x85\x75\x5a\x8a\x01\x6f\xc4\x80\x37\x62\xc0\x27\x31\xe0\xad\x18\xf0\x56\x0c\x78\x2b\x06\xbc\x15\x03\xde\x62\x75\x52\xd6\xd1\x52\x6c\x4c\xa9\x57\xa5\xd8\x30\x8d\xb3\x09\x38\x6c\x60\x18\x38\x61\x14\xe3\x25\x1c\x66\x4d\x01\x7f\x0d\xc0\x4e\x62\x0c\xb8\x34\x4e\xed\x45\xe0\xad\x41\xf8\x1d\x00\x8e\x9b\xea\x46\x7b\x3f\xda\x11\xe7\x00\xf0\xdb\x54\x12\xed\x29\xb4\x63\x5c\x03\xc0\x6d\x53\xc0\x5f\x03\x0b\xca\x3c\x64\x8a\xc0\x5d\x83\xef\x03\xcf\x01\x77\x0d\xd2\x3c\x56\x9e\xa5\xf9\x9d\x0e\x03\x77\x9d\xfe\x0e\xe1\xae\x66\xe0\xae\xc1\x7f\x84\x1d\xe0\xae\x41\x9a\xf7\xc9\xe2\x65\xc1\xe7\x06\xd7\xd1\x0e\x3c\xd5\x0c\xdc\x75\x89\xf6\xaf\xa1\x53\x06\xe2\xbd\x85\x7e\x63\x82\xcf\x5c\x02\x4e\x83\xdf\x21\xc4\x51\x3a\x2d\x9f\x23\xf0\x6b\x8c\xea\xd6\x48\xe8\x9a\x61\xa7\x7c\xe5\x1d\xea\x17\xa9\xe6\xe5\x4a\x35\x5f\xda\x8f\x13\xef\xae\x3b\x71\xd7\xfe\xe6\xd9\x47\x50\xbf\x4b\x87\x29\x0f\x65\x5d\x2c\x1d\x86\x9d\x80\x75\x3f\xac\xdd\x07\x7f\x9b\xc6\xd1\x82\x7d\x06\x74\xa4\x85\x00\xa0\x93\xbf\x8d\xe5\x97\x1c\x6f\x29\xb6\x03\x8a\xf3\x07\xea\x6f\x2e\xf6\x11\xe8\x2e\xe4\x1b\x0a\x1e\xb4\x2e\x52\x1e\x70\x1c\x65\xc7\xdf\xe1\x33\x4f\x2d\xee\xf9\x09\xd0\xef\x64\xfa\x3b\xfb\xd0\x77\xeb\x6d\xef\xd3\x6f\x0b\xd3\xdf\xd2\xea\xd7\xc7\x9d\x1f\xdd\x27\xee\xdc\xdd\x27\xee\xdc\x68\x08\xc7\x6c\xf8\xe2\x18\x2d\xae\xfe\x63\xe4\xc5\xdb\x94\x27\xd6\x32\xf2\x63\x16\xf5\xe7\x1d\xe4\xc9\xeb\xa8\x37\x7f\x84\xf3\xea\xd9\x09\xe0\x52\xe4\x4d\x22\x0f\x5c\xba\x8b\x3c\x2a\x30\x1c\x5b\xa4\xba\xf0\x9b\x14\x8f\x3c\x17\x45\x9b\x7e\x5e\x99\xa7\xa1\xda\x39\x9b\x0e\x6e\x0e\x4e\x7d\x8a\xf8\x1a\x4e\xfd\x19\xc1\xf3\x73\x3a\x5f\xdf\x0e\x8e\x8d\x7b\xf0\x6a\x97\x06\xaf\x8e\xb4\x86\x45\x3b\x5f\x77\xb4\x3e\x9d\x7d\xe4\xe3\x9d\xb4\x51\x8e\x44\x1e\xa5\xfe\x07\xd0\xff\x80\xbe\xff\xcb\x4f\xd0\x86\xe7\xae\x03\xc3\xac\x0e\xc4\xb5\x75\xe0\xc0\x7d\xe9\xed\x17\xaf\xd8\xd4\xce\xab\x52\x5b\x92\xe1\x07\xca\x27\xeb\x55\xaa\xbb\xd6\x44\xde\x13\xcf\x46\xd0\x3e\x8f\xfb\x8e\x68\xeb\x73\xa2\x87\xf7\xfe\xe6\x8b\xe2\x36\xcc\xba\x4a\xfd\x46\xcc\x93\x66\x93\xe2\x3f\x85\x7c\x5a\xd9\x17\x8e\x89\x02\xf7\x59\x68\x8f\x9a\x07\x8d\x87\x63\xb7\x49\xf0\x61\xc8\x1d\xfb\x6f\x88\x96\xb0\x91\xa0\x7b\x24\x93\xf6\x53\x99\xef\xba\xf5\xb8\xa2\x59\xff\x93\x65\x8a\x67\xc4\xfc\xde\x5e\xc8\x70\xe3\x6d\x15\x77\x64\x11\x77\x16\xf5\x3c\x57\xab\xe3\xf7\xf6\xdc\xe3\xcb\xa2\xce\x5b\x57\x3b\x1b\x8e\x47\xa9\x0f\x57\xe3\x75\xf5\x76\xb4\x7a\x5d\x75\xf5\xb6\x74\xf5\xef\x6a\x77\x5d\xbd\x7b\x5a\x3d\xd4\xcd\x4e\x6f\xff\x94\xbb\x6e\xc2\xae\xa3\x97\x14\xbc\xb5\x98\xf2\xad\x9b\xdb\xda\xf3\x3a\xe6\x1f\x78\x29\xb3\xb8\x83\x3a\x77\x0d\x75\x11\xcf\x23\xb1\x80\xba\x28\xef\x55\xae\x53\xff\x1b\xf4\x5c\xb2\xa7\x97\x04\x8d\x36\xff\xa7\xf0\xe7\x3d\xaf\x6f\x09\xb9\x53\x07\x09\xbf\x3a\x75\x70\x93\xe2\x75\xe5\xef\x7c\x60\xfe\xfe\x8b\xe0\x9d\x75\xa0\xc7\xbb\xba\xbc\x10\xfb\x74\x93\x3a\x7f\x36\xb5\xd7\x82\x3c\x77\x58\x8b\x54\x3f\xf8\x38\x24\xae\x95\xe7\x61\x79\xdf\x94\x29\xff\x05\xf2\xf4\x25\xf0\x32\xbf\xf3\xe0\xaf\x81\x2f\x82\xa7\xf9\xac\x1c\xa2\x38\x36\x51\xbf\x73\x09\xc2\xbd\xd3\x26\xf1\x9b\xa0\xb9\xd8\xeb\xd0\x5b\x82\x9d\xaf\x62\x5f\x58\x55\x70\x93\x55\xbe\xa5\xe0\xa7\xca\x12\xc6\xdf\x4c\xf9\x53\xc9\x10\xdf\x19\x52\xe7\xf5\x66\x75\xf0\xfd\x98\x87\x23\x0d\x3c\x87\xb0\x71\x43\xd0\x07\xaf\x0f\xdf\x34\xda\x8c\xfb\x39\xc7\xa4\xd8\xf9\x45\xc5\x83\x5e\x1c\xb8\xa5\xe2\xc0\xab\xc3\xda\xb8\x75\x38\x30\xa5\xc3\x53\x01\xfa\x1c\x07\xce\xef\x43\xbf\x2e\x7e\x0c\xf0\xcb\x71\xa0\x16\x47\x36\x50\xcf\xb4\x38\xb0\x81\x7a\xa6\xc5\x81\x01\xf5\x6c\xab\xa1\x7a\xb6\xb5\x3f\x1c\x58\xc3\x49\x94\x27\xd6\x0d\xe4\xc7\x69\xca\x9f\xa1\xa8\x01\xbb\xc8\x97\x01\xca\x2f\x6b\x09\xf8\x10\xe7\x3e\x07\x0f\xae\x33\x3c\xf8\xcf\xb4\x0e\x17\x80\x07\xdb\x6e\x53\xdd\x0b\x7f\x51\xd8\x1d\xea\x23\xfb\xd1\xe6\x93\x82\x3a\xf5\x8e\xc6\xe3\xd4\xbb\x5f\xa4\xf1\xb8\xd6\xd9\x4a\x60\xbd\xa3\x79\x74\xd6\x89\xfe\x1c\xaf\xcb\xbb\x1f\x4c\xbd\xbb\xa6\xd4\x3b\x0b\xeb\xd9\xba\x8e\x75\x9a\x50\xef\x0d\x64\x9d\xb2\xae\x63\x5d\x27\xd4\x7b\x06\xab\xbc\xee\x53\x0f\xe9\xfc\x4e\xf5\xca\xc1\xa1\x95\xc7\x89\xa6\xe9\x9a\x50\x9c\xc7\x45\xbd\x04\xcd\x0d\xbe\x59\xab\xa3\x71\x11\xe7\x5b\xf0\xb3\xcc\xea\xe5\xc2\x7d\xd7\xcb\x61\x43\x5f\x2f\xfd\x9e\xa3\xc0\x6d\xe0\x39\x7e\xe5\x38\xd5\xb9\x07\xeb\xaf\xf1\x62\x9d\xd0\xb1\xdc\xb0\x26\xf7\x89\x5f\x6b\xf7\x54\x45\xc2\x75\xb8\xa7\x1a\x31\x0b\x02\xa7\x96\xce\xd2\xb9\xa3\x82\xf7\x32\x37\xe1\xa7\x34\x4b\xcf\x2b\x3b\x4b\x79\x2e\xcf\x75\x15\x9c\x7b\x74\xeb\x72\x4d\x7b\xfe\x4c\x52\xdc\x8b\x6b\xbe\xeb\xf9\xb6\x66\x3d\x97\x66\x29\x2f\x73\xb3\x0b\x1e\x7c\x1b\x74\x2f\x57\x1f\x37\xc3\x6e\x6c\xbf\x76\xfd\x70\xf3\x0b\xc0\xcd\x29\x15\x37\x07\xcc\xd3\x82\x76\x5f\x5c\xf0\xc1\xcd\xea\x7a\xcf\xe2\xbe\xce\x1f\x37\x27\x55\xdc\x2c\xdf\x73\x05\xc4\x33\x17\xf4\x9e\x2b\x40\x4f\x8b\x9b\xe5\x7d\x43\x80\x9e\x16\x37\xcb\xfb\x86\x00\x3d\x2d\x6e\x96\xf7\x0d\x47\xbc\xfd\x93\xee\x7d\x06\x76\xbd\x79\x99\xdc\x27\x6e\xc6\xfc\xe3\x3d\xaf\x83\x9b\x97\x18\x6e\x5e\x66\xb8\xf9\x4f\x18\x6e\x7e\x17\xb8\x99\x16\xa8\x17\x37\xd3\x01\xd8\xd9\x47\x28\xaf\xe5\x3e\x32\x62\xde\xa6\x78\x5d\xf9\x6b\xe7\x55\xd8\xf8\x7b\x1a\xd7\x03\xe7\xe1\x7f\x33\x7c\xd6\xe8\xbd\x72\x12\x74\xee\xfe\xf0\x99\xbc\xef\x62\x71\xeb\xf0\x59\x32\xe8\xbe\x4c\xa3\xcf\xf1\xd9\xdc\x3e\xf4\x1b\xbe\xdf\xd3\xf8\x6d\x08\x9f\x35\xb0\x6e\x02\xef\xe9\x02\xf4\x02\xef\xe9\x34\xeb\x66\xab\xa1\x75\xb3\x4f\x7c\xb6\x84\xbc\x90\xdf\x47\x2c\x22\x3f\x06\x96\x81\x0f\x90\x27\x09\xe0\x89\xf2\xb6\x92\x6f\x93\x0b\xc8\x9b\x36\xdc\xb3\xe3\x7d\x71\xee\xf4\xb7\x69\x5d\xbd\x03\x5c\xf6\x3a\xdd\xe7\x57\x4e\x50\x3c\x43\xcf\x11\x8d\x46\xe8\xfe\xa7\x82\xfb\xec\xa1\xa7\xa4\x7c\x5c\xd0\x17\x0d\xac\x33\x83\x2e\xf2\x5e\x0c\x83\x0f\x13\x10\x90\x75\x7f\xa4\x19\xf7\x6b\x6c\xbd\x76\x8a\xe5\xea\xba\x5f\xfb\x02\xee\xd7\x42\xb8\x07\x07\x1e\x91\xb8\x84\xe3\x9a\x97\x3f\xf1\x1b\xb5\x79\x26\x7c\x06\x5c\xc6\xee\xe5\x4a\x67\x9d\xf7\x63\xf6\xbe\x93\xc5\xfd\xb8\x55\xee\x67\xb8\xe7\x54\xad\x1f\xcd\xa3\x7a\xaf\x9e\x29\xbf\x8b\x75\x37\x01\xfe\xaf\xc1\x9f\x53\x70\x9b\x17\x97\x11\xae\xeb\x8c\xa8\xf1\xcb\x7e\x69\xbc\xdf\x9a\x46\x7f\x47\xaf\xc0\xe2\x2b\x7a\x70\xeb\xa8\xe6\x3e\xd3\x2a\xe3\x1c\x7d\x1d\x78\x12\xdf\x25\x54\x80\xb7\xa7\xf1\x5e\xa5\x42\xcb\xc0\xf3\x5e\xbb\x02\xdc\x1f\x35\xb0\x0f\x4a\xbe\x99\x00\x58\x85\x5e\x4f\xd5\x9e\xbf\xd3\xff\x90\xd2\x9e\xce\x1b\xaa\xbe\x40\x69\x2a\x6e\xb4\xeb\x91\x55\xee\x76\xe1\x56\xe7\x27\xef\x87\xf9\x79\x5b\x8e\xcf\x77\x5c\x87\x54\xbf\xd9\x01\xb9\xff\x10\xae\xdd\x0c\x63\x7e\xf1\x5d\x92\xff\xfc\xbf\xcd\xe6\xff\x9a\x07\xff\xcc\x05\xe0\xd7\xb0\x81\x7b\x6e\xb6\xdf\xf8\xf7\xff\x64\x8d\xff\xe1\xe4\xf3\x02\xcb\xe7\x25\x25\x9f\x33\xc0\xff\x7e\xf9\xec\xbd\x77\x29\xb0\x75\xd2\x58\xbe\x3e\x68\x3e\xf0\x73\xc2\x0f\x6b\xfe\xe4\x79\xc8\xba\x8e\xfd\x3c\x91\x67\xe7\x25\x7e\xce\x53\xdf\x13\xfb\xd7\x8b\x2b\xae\xf1\xbb\xea\x05\xf6\x8d\x34\xde\x77\x4f\x63\x7f\xdf\x04\xcd\x0d\xcc\xb2\xf8\xbf\xfe\x03\x9b\xff\x61\x31\xc7\xff\xa4\xcc\x87\xf3\xde\x1e\xdf\x89\x1c\x51\xbf\x53\x90\xdf\x19\xf0\xf3\x59\xb4\xb5\x4f\xcc\xb0\x7b\x9d\xe8\xbe\x8b\xf0\x9e\xcf\x9e\x66\xe7\xb3\x9f\xa3\xf3\xd9\x2c\xce\xe1\xb0\x9f\x9b\xc5\x77\x2d\xb3\x1f\x02\x2f\xd5\xdf\xff\x3f\xdc\x07\x6e\x88\xe0\x3d\x7e\xbd\xef\xcb\x4a\xb3\xc0\xb1\xb3\xf8\xae\xa1\x81\xf3\xa1\x1e\xf7\x24\x45\xbb\xb5\xb8\xed\x8b\x27\x74\xe7\x8c\xd2\xec\x3c\xe6\x61\xcc\x53\xc7\x82\xef\x8f\xeb\x9d\x0f\x61\x37\xb6\x5f\xbb\x7e\xe7\xc3\x21\xd4\xc3\xff\x81\xbc\x3e\x2e\x1f\xb3\xc7\xdb\x82\xf7\x5e\x1e\x7c\x3e\x06\x7c\xfe\x5f\x7b\x52\x4e\xf5\x01\xdf\xa5\x96\x29\x5f\x38\xde\x70\xde\xa3\xa3\x4e\xe2\x7b\x55\xe7\x9c\x89\xf3\x7e\xec\x7d\xd0\x55\x50\x89\x0b\x6e\x81\xca\xfb\x6e\xf9\xfe\xe6\x5d\xd4\x49\x9c\x83\x62\xf8\x4e\x02\xf5\x29\x7b\xf6\x5d\xe4\x47\xfd\x73\xe8\x6a\xc0\x39\x54\x87\x53\xdf\x77\x7f\x9f\xc5\x70\xaa\xf3\xfd\x17\xee\xf5\xca\xb4\x5e\x9c\xfa\xfe\x0f\x9e\x7a\xb2\xa2\xc5\x1f\x6a\x5d\x93\xdf\xcf\x4e\x83\x46\x43\x7f\x25\xe4\xee\xfa\x62\x4f\xe9\xd3\x87\xe8\xfb\xd7\x4c\x79\x4d\xd1\x77\xce\x73\xef\x19\xba\xe7\x44\x75\xc7\xac\xea\xff\x29\x8d\xd7\x55\xcf\xe6\x45\x3d\x1b\xd5\xd6\x33\x6b\x11\x75\x02\xfb\x49\xd8\xa0\xc4\x7d\x78\xf9\xf6\x07\xe2\x3c\xf8\xf0\xf2\x4d\x9e\xfb\x36\x41\xe5\xf7\x1a\xb7\x41\xd7\x95\x7c\x7a\x78\xf9\x79\xc7\x27\x3f\xeb\x9f\xfb\xd6\x1f\xf0\xdc\xb7\xb1\x4f\x7d\x7e\xde\x5d\x0d\xd0\x97\xeb\x23\xd2\xea\x3d\xe7\xae\x05\x9c\xe7\x9c\x75\xb2\xe5\xb3\x4e\xfe\xa3\xc1\x75\xb2\x06\x7c\x40\xcf\x65\x24\x84\xf7\xfe\x18\x4f\xfd\xf3\x12\xbd\x68\x97\xdf\x7f\x58\x4b\xf4\xfc\x47\x9a\xe9\x43\xa6\xca\x31\xd8\xc1\x77\x51\xf2\xbb\x2c\xaa\x2a\xae\x73\x54\xb8\xbb\x36\x3e\xca\x53\x7c\xf7\xf1\x0e\xf2\xf1\x75\xe7\x7b\x60\x3b\xcf\xe5\x7b\xba\xec\xd9\x22\xc3\x47\x2a\xbe\xc9\x94\x65\x1e\x5e\x01\x2f\xf3\xf6\xeb\xe0\xe5\x3d\xdc\x9c\x82\x27\x73\xb1\x37\x59\xfe\xbd\xe5\x99\xcf\x19\xed\x7c\x5e\xa9\x53\x77\xe8\x00\xeb\xad\x3b\x74\x31\x9e\x29\xcf\xf9\xd4\x9d\x38\xd9\xf3\xad\x3b\x3f\x41\xf3\xed\xaa\x3b\x63\x01\x75\xa7\x82\xef\x5d\x9c\xba\x43\x0f\x7c\xe8\x13\x24\x8f\x9a\x14\xc0\xd0\x17\xc0\x37\x75\x18\xee\xf9\xf2\xc6\xf7\x68\x9d\xf8\x5a\x3c\xf1\x35\x5a\x17\xdd\xf7\xf6\x1c\x67\x37\xbb\xfe\x8c\x66\x7f\x99\x3d\xc7\x2d\xf8\xab\x27\xb3\x47\xda\xc9\x64\x5d\x1a\x99\xad\x77\xc5\x70\xfe\x3b\xaa\xe7\x86\x9f\x37\xfe\xcf\xf5\xcd\xa7\xee\x97\x17\x70\x23\x6c\xe4\x0f\xa8\xf2\xad\x10\xc9\x87\x23\xaa\xfc\xab\x90\xb7\xb4\xa8\xf2\xcf\x41\x3e\xd3\xa4\xca\x3f\x30\x49\xbe\xc2\xec\xdc\x86\x7c\x82\xd9\xf9\x1b\xc8\xe7\x58\x3c\x63\x88\x73\x95\xf5\xef\x86\x7c\x9d\xc9\x0d\x29\x67\xf1\x7c\x07\xf6\x8d\x56\x55\x7e\x03\xf2\x0e\x26\x5f\x10\xfa\xad\xc6\x16\xb3\x73\xc7\x24\xf9\x65\x36\xae\xbf\x84\x9c\x8f\x77\x0e\x76\xb6\x99\xfc\xef\xd0\xbf\x93\xc5\xff\x87\x90\x77\x31\x79\xa7\xb0\xf3\x08\xde\x12\x38\xbf\x8d\x10\xc9\x47\x99\xbc\x08\xf9\xe5\xb0\x2a\xef\x82\x9d\xe5\x36\x55\xbe\x8b\xfe\x2b\x4c\x3e\x02\xf9\xae\x2a\x36\xfa\x21\x1f\x63\x7e\xe7\x85\xfd\x83\x46\xaa\x59\x95\x4f\x40\x3e\xcf\xec\x27\x21\xdf\x66\xf2\x0e\xc8\x57\x99\xfd\xf5\x10\xc9\xd7\x99\xfc\x1c\xe4\x63\xcc\xef\x15\xd8\xb9\xc5\xec\x8f\x4a\x39\x7b\x2e\x3b\xb0\xc3\x9f\xd7\x2b\x90\xf3\xe7\x75\x19\x76\xfa\x99\xfd\x61\xc8\xbb\x1e\x55\xe5\x71\xc8\x3b\x98\x7c\x5b\xda\x67\xf2\xbf\x85\x3c\xcf\xc6\xfb\xcb\x90\x6f\x30\x79\xbf\xb0\xdf\x6e\xa4\x58\x1d\x6b\x81\x7c\x94\xc9\xd7\x42\x24\x5f\x67\xf3\xb6\x69\x92\x9c\xe7\xf9\x9f\x41\xbe\xc6\xe4\x2f\xc1\x4e\x8a\xad\xa3\x19\xf8\xdd\x62\xf2\x14\xe4\xdb\x4c\xfe\x1c\xec\xec\xb2\x71\xf5\x40\x3e\xc6\xe2\x7f\x43\xec\x93\x9d\x06\xff\x7d\x52\xc8\x8f\x78\xe4\xdf\x14\xfb\xe4\x63\x1e\xf9\x41\x21\x7f\xdc\x23\xff\x55\x61\xe7\xa0\x47\xfe\x69\x21\x7f\xc4\x23\xff\xb6\x61\xcb\x9b\x3c\xf2\xd3\x42\x1e\xf1\xc8\x23\x42\xde\xee\x91\x2f\x0b\x79\xd8\x23\x4f\x0a\x79\xab\x47\xfe\x3b\x22\xfe\x1f\xf3\xc8\xbf\x2f\xe2\x3c\xe4\x91\x47\x85\xfc\xb0\x47\xfe\x2d\x61\x27\xea\x91\x3f\x29\xe4\x4f\x78\xe4\x29\x50\xfb\x71\xd9\x48\xab\x9f\xf1\x79\xc6\xaf\xb8\xf8\xcf\x57\xff\x46\x0f\x38\xfc\xc9\xea\xdf\x4e\x8b\xda\xee\xb6\x7f\x82\xd9\x3f\xc1\xec\xdb\xfc\x02\xb3\xbf\xd6\xa4\xf2\xeb\x11\xd5\x5f\x8b\xcb\x9f\x0d\x31\x86\xb9\x3e\xe3\xe3\xa6\xca\x6f\x35\xa9\xf6\xfa\xc3\x0e\xff\xb9\xea\xdf\x44\x58\x6d\x5f\x67\xfe\x26\xda\x1c\x3e\x59\xfd\x9b\x6f\x0b\x8e\x27\xc9\xfc\xcf\xf3\x78\x5a\x55\xff\x6e\x7b\xb6\xff\x35\x66\x7f\xe7\x11\xb5\x7f\xfe\xa0\x1a\xcf\x28\x9f\x0f\xe6\x2f\x1e\x52\xf9\xe5\x66\xd5\x5e\x9c\xc5\xb3\xda\xaa\xda\x37\x3e\x55\x1c\x9f\x29\x1a\xb9\xc2\x78\x31\x5f\xb8\xf0\xe5\xf1\x74\x7a\xf2\xfc\x78\x31\x9d\x9d\xca\xa5\x33\xd9\xec\x78\xbe\x68\x7c\xaa\x30\x7e\xae\xd6\xfc\x69\xde\xea\x52\x2c\x66\xf3\xe9\xd7\x8e\xa7\xb3\x17\xce\x9f\x1f\xcf\x56\x5b\xf4\x62\xd5\x9c\xae\x51\xdb\xc2\xfd\xf4\xe9\xfd\xf4\x05\xf9\xe9\xf3\xf5\xe3\xb4\x7c\x25\x93\x9f\xb2\x65\xc5\x42\x26\x3b\x5e\x48\x4f\x15\x33\xc5\x4b\x53\x46\xfa\xb5\xf1\xc2\xd4\xe4\x85\xf3\x8a\xb3\xa9\xea\x4c\xd8\xed\xe3\xdc\x9c\xd3\xe0\xee\x9e\x3d\x77\x61\xca\xd3\x95\x84\xe9\x73\x93\xd9\xf1\xf3\x76\xeb\x54\xb1\x50\xcc\x7c\xb9\x4a\xad\xaf\xd8\xf4\xf9\x93\x27\x8f\xa6\x3f\x63\x93\x9e\x74\xaf\xa0\xc7\xd3\x3d\x9f\x21\x71\x0f\xe4\x92\xef\x47\x37\xd0\x9e\x7e\x74\x3f\x81\xee\x27\x20\x3f\x51\x1b\x63\x7a\xfc\xb5\xf1\xf3\xc5\xf4\x64\xfe\xb5\xe3\x24\xc3\x24\x4c\x5d\xc8\xe6\x5c\xd2\xe2\xa5\xfc\xb9\xf1\xfc\xe4\x2b\x24\x12\x46\x05\xe9\x23\x52\x35\x09\xe9\x31\x9b\x1c\x23\xd2\x47\xe4\x78\xba\x17\x52\x49\x7b\xd0\x4c\xb4\xc7\xa6\xde\x78\xfa\xb4\xf1\xf4\x79\xe3\xe9\x23\xa3\x7d\x18\x2b\x58\xa2\x7d\xa0\x3d\x35\xf9\xd1\xa3\x88\xe5\x28\xb5\x13\xed\x01\xad\xea\xa3\xbd\x07\xed\x92\x3f\xda\x8b\xfe\xbd\xe8\xdf\x8b\xfe\xbd\xe8\x0f\xfe\x68\x0f\xfa\x83\xf6\xf6\xa0\x3f\xf8\x1e\xf0\x44\xab\xfd\xbb\xd1\x1f\xb4\xb7\x9b\x9e\x55\x2f\xf8\x1e\xf0\x3d\x78\x39\xf6\x00\xbf\x6f\x98\x86\x66\x57\xac\xee\x29\xf4\x39\x9b\xb1\xcc\x1a\xd9\xf6\x5f\xfb\xff\x44\xb0\xe3\x01\xd5\x10\xcd\x8f\xc1\x19\xe3\xa3\x3a\xfa\x33\x4c\xce\x8f\x15\x77\x0d\xcf\xd1\x41\xfc\xd6\x7f\x81\x28\x5e\xf3\x19\x31\x83\xc6\x29\xf5\xa5\xfc\xdf\x7c\xfc\xdf\x02\x8d\xb7\x06\xfb\xff\x57\x1f\xff\x5b\xf0\x3f\xec\xf2\x1f\xd6\xf8\x7f\xd3\xc7\xff\x06\x8c\xd6\x1b\xff\x37\x7c\xfc\x77\x3f\xa3\xfa\xb1\xfd\x47\x34\xfe\x2f\xf9\xf8\x1f\xc6\x7e\xd4\xdf\x12\xec\xff\xa2\x8f\xff\x24\xfc\x8f\xb9\xfc\xb7\x6a\xfc\xff\x92\xa9\xf7\x7f\x05\xd0\x68\xb5\x2d\xd8\xff\xb3\xa6\xde\xff\x02\xfc\xcf\xb9\xfc\x3f\xa2\xf1\x5f\xf4\xf1\x9f\xfa\x38\xd1\xf9\x83\xc1\xfe\xf3\x3e\xfe\xbb\x3f\x4b\xf4\xb2\xcb\xff\x41\x8d\x7f\xfb\x6d\xaa\xce\xff\x56\x82\xe8\x6e\x9d\xfc\xfb\x29\x43\xef\x7f\x05\xfe\xc7\x5c\xfe\xdb\x35\xfe\x7f\x2b\x44\xfe\x79\x0d\xd8\xc0\xfb\x6a\x8e\xbc\xf9\xfa\xfd\xd0\xd4\xeb\x7f\xd0\xa0\xfe\xbc\x8f\x7f\xe3\x58\x63\xfa\x2d\x3e\xfa\x8f\x37\xa8\xff\xe7\x3e\xfa\x5d\x0d\xea\xff\xa4\x8f\xfe\x33\x0d\xea\x77\xf8\xcc\xdf\x70\x83\xfa\x5f\xf3\xd1\x7f\xe5\x98\xbe\x3f\xaf\xdf\x4f\xf9\xe8\x4f\xf8\xe8\x73\xfe\xf7\x4d\xc3\x60\x47\x3f\xf1\xcb\x43\x7f\xcc\x75\x8e\xb0\x53\x42\xe6\x9f\x3c\x19\xfe\x7f\x00\x00\x00\xff\xff\xf7\x13\xcc\x25\x78\x48\x00\x00")

func tcptracerEbpfOBytes() ([]byte, error) {
	return bindataRead(
		_tcptracerEbpfO,
		"tcptracer-ebpf.o",
	)
}

func tcptracerEbpfO() (*asset, error) {
	bytes, err := tcptracerEbpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tcptracer-ebpf.o", size: 18552, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tcptracer-ebpf.o": tcptracerEbpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tcptracer-ebpf.o": &bintree{tcptracerEbpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

